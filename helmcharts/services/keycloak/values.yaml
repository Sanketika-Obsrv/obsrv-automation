# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.defaultStorageClass Global default StorageClass for Persistent Volume(s)
## @param global.storageClass DEPRECATED: use global.defaultStorageClass instead
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  ## Compatibility adaptations for Kubernetes platforms
  ##
  compatibility:
    ## Compatibility adaptations for Openshift
    ##
    openshift:
      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
      ##
      adaptSecurityContext: auto
## @section Common parameters
##

## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param namespaceOverride String to fully override common.names.namespace
##
namespaceOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param enableServiceLinks If set to false, disable Kubernetes service links in the pod spec
## Ref: https://kubernetes.io/docs/tutorials/services/connect-applications-service/#accessing-the-service
##
enableServiceLinks: true
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param dnsPolicy DNS Policy for pod
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
## E.g.
## dnsPolicy: ClusterFirst
dnsPolicy: ""
## @param dnsConfig DNS Configuration pod
## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
## E.g.
## dnsConfig:
##   options:
##   - name: ndots
##     value: "4"
dnsConfig: {}
## @param clusterDomain Default Kubernetes cluster domain
##
clusterDomain: cluster.local
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []
## Enable diagnostic mode in the statefulset
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the the statefulset
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers in the the statefulset
  ##
  args:
    - infinity
## @section Keycloak parameters

## Bitnami Keycloak image version
## ref: https://hub.docker.com/r/bitnami/keycloak/tags/
## @param image.registry [default: REGISTRY_NAME] Keycloak image registry
## @param image.repository [default: REPOSITORY_NAME/keycloak] Keycloak image repository
## @skip image.tag Keycloak image tag (immutable tags are recommended)
## @param image.digest Keycloak image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
## @param image.pullPolicy Keycloak image pull policy
## @param image.pullSecrets Specify docker-registry secret names as an array
## @param image.debug Specify if debug logs should be enabled
##
image:
  registry: docker.io
  repository: bitnami/keycloak
  tag: 26.0.5-debian-12-r2
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  ## Set to true if you would like to see extra information on logs
  ##
  debug: false
## Keycloak authentication parameters
## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#admin-credentials
##
auth:
  ## @param auth.adminUser Keycloak administrator user
  ##
  adminUser: admin
  ## @param auth.adminPassword Keycloak administrator password for the new user
  ##
  adminPassword: "admin"
  ## @param auth.existingSecret Existing secret containing Keycloak admin password
  ##
  existingSecret: ""
  ## @param auth.passwordSecretKey Key where the Keycloak admin password is being stored inside the existing secret.
  ##
  passwordSecretKey: ""
  ## @param auth.annotations Additional custom annotations for Keycloak auth secret object
  ##
  annotations: {}
## Custom Certificates
## @param customCaExistingSecret Name of the secret containing the Keycloak custom CA certificates. The secret will be mounted as a directory and configured using KC_TRUSTSTORE_PATHS.
## https://www.keycloak.org/server/keycloak-truststore
## Could be created like this: kubectl create secret generic secretName --from-file=./certificateToMerge.pem
customCaExistingSecret: ""
## HTTPS settings
## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#tls-encryption
##
tls:
  ## @param tls.enabled Enable TLS encryption. Required for HTTPs traffic.
  ##
  enabled: false
  ## @param tls.autoGenerated Generate automatically self-signed TLS certificates. Currently only supports PEM certificates
  ##
  autoGenerated: false
  ## @param tls.existingSecret Existing secret containing the TLS certificates per Keycloak replica
  ## Create this secret following the steps below:
  ## 1) Generate your truststore and keystore files (more info at https://www.keycloak.org/docs/latest/server_installation/#_setting_up_ssl)
  ## 2) Rename your truststore to `keycloak.truststore.jks` or use a different name overwriting the value 'tls.truststoreFilename'.
  ## 3) Rename your keystores to `keycloak.keystore.jks` or use a different name overwriting the value 'tls.keystoreFilename'.
  ## 4) Run the command below where SECRET_NAME is the name of the secret you want to create:
  ##       kubectl create secret generic SECRET_NAME --from-file=./keycloak.truststore.jks --from-file=./keycloak.keystore.jks
  ## NOTE: If usePem enabled, make sure the PEM key and cert are named 'tls.key' and 'tls.crt' respectively.
  ##
  existingSecret: ""
  ## @param tls.usePem Use PEM certificates as input instead of PKS12/JKS stores
  ## If "true", the Keycloak chart will look for the files tls.key and tls.crt inside the secret provided with 'existingSecret'.
  ##
  usePem: false
  ## @param tls.truststoreFilename Truststore filename inside the existing secret
  ##
  truststoreFilename: "keycloak.truststore.jks"
  ## @param tls.keystoreFilename Keystore filename inside the existing secret
  ##
  keystoreFilename: "keycloak.keystore.jks"
  ## @param tls.keystorePassword Password to access the keystore when it's password-protected
  ##
  keystorePassword: ""
  ## @param tls.truststorePassword Password to access the truststore when it's password-protected
  ##
  truststorePassword: ""
  ## @param tls.passwordsSecret Secret containing the Keystore and Truststore passwords.
  ## The secret must have "tls-keystore-password" and "tls-truststore-password" keys for the keystore and truststore respectively.
  ##
  passwordsSecret: ""
## SPI TLS settings
## ref: https://www.keycloak.org/server/keycloak-truststore
##
spi:
  ## @param spi.existingSecret Existing secret containing the Keycloak truststore for SPI connection over HTTPS/TLS
  ## Create this secret following the steps below:
  ## 1) Rename your truststore to `keycloak-spi.truststore.jks` or use a different name overwriting the value 'spi.truststoreFilename'.
  ## 2) Run the command below where SECRET_NAME is the name of the secret you want to create:
  ##       kubectl create secret generic SECRET_NAME --from-file=./keycloak-spi.truststore.jks --from-file=./keycloak.keystore.jks
  ##
  existingSecret: ""
  ## @param spi.truststorePassword Password to access the truststore when it's password-protected
  ##
  truststorePassword: ""
  ## @param spi.truststoreFilename Truststore filename inside the existing secret
  ##
  truststoreFilename: "keycloak-spi.truststore.jks"
  ## @param spi.passwordsSecret Secret containing the SPI Truststore passwords.
  ## The secret must have "spi-truststore-password" key.
  ##
  passwordsSecret: ""
  ## @param spi.hostnameVerificationPolicy Verify the hostname of the server's certificate. Allowed values: "ANY", "WILDCARD", "STRICT".
  ##
  hostnameVerificationPolicy: ""
## @param adminRealm Name of the admin realm
##
adminRealm: "master"
## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy=edge.
##
production: false
## @param proxyHeaders Set Keycloak proxy headers
##
proxyHeaders: ""
## @param proxy reverse Proxy mode edge, reencrypt, passthrough or none
## DEPRECATED: use proxyHeaders instead
## ref: https://www.keycloak.org/server/reverseproxy
##
proxy: ""
## @param httpRelativePath Set the path relative to '/' for serving resources. Useful if you are migrating from older version which were using '/auth/'
## ref: https://www.keycloak.org/migration/migrating-to-quarkus#_default_context_path_changed
##
httpRelativePath: "/"
## Keycloak Service Discovery settings
## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#cluster-configuration
##
## @param configuration Keycloak Configuration. Auto-generated based on other parameters when not specified
## Specify content for keycloak.conf
## NOTE: This will override configuring Keycloak based on environment variables (including those set by the chart)
## The keycloak.conf is auto-generated based on other parameters when this parameter is not specified
##
## Example:
## configuration: |-
##    foo: bar
##    baz:
##
configuration: ""
## @param existingConfigmap Name of existing ConfigMap with Keycloak configuration
## NOTE: When it's set the configuration parameter is ignored
##
existingConfigmap: ""
## @param extraStartupArgs Extra default startup args
##
extraStartupArgs: ""
## @param enableDefaultInitContainers Deploy default init containers
## Disable this parameter could be helpful for 3rd party images e.g native Keycloak image.
##
enableDefaultInitContainers: true
## @param initdbScripts Dictionary of initdb scripts
## Specify dictionary of scripts to be run at first boot
## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#initializing-a-new-instance
## Example:
## initdbScripts:
##   my_init_script.sh: |
##      #!/bin/bash
##      echo "Do something."
##
initdbScripts: {}
## @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
##
initdbScriptsConfigMap: ""
## @param command Override default container command (useful when using custom images)
##
command: []
## @param args Override default container args (useful when using custom images)
##
args: []
## @param extraEnvVars Extra environment variables to be set on Keycloak container
## Example:
## extraEnvVars:
##   - name: FOO
##     value: "bar"
##
extraEnvVars: ""
## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars
##
extraEnvVarsCM: ""
## @param extraEnvVarsSecret Name of existing Secret containing extra env vars
##
extraEnvVarsSecret: ""
## @section Keycloak statefulset parameters

## @param replicaCount Number of Keycloak replicas to deploy
##
replicaCount: 1
## @param revisionHistoryLimitCount Number of controller revisions to keep
##
revisionHistoryLimitCount: 10
## @param containerPorts.http Keycloak HTTP container port
## @param containerPorts.https Keycloak HTTPS container port
##
containerPorts:
  http: 8080
  https: 8443
## @param extraContainerPorts Optionally specify extra list of additional port-mappings for Keycloak container
##
extraContainerPorts: []
## @param statefulsetAnnotations Optionally add extra annotations on the statefulset resource
statefulsetAnnotations: {}
##
## Keycloak pods' SecurityContext
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enabled Keycloak pods' Security Context
## @param podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
## @param podSecurityContext.sysctls Set kernel settings using the sysctl interface
## @param podSecurityContext.supplementalGroups Set filesystem extra groups
## @param podSecurityContext.fsGroup Set Keycloak pod's Security Context fsGroup
##
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
## Keycloak containers' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled Enabled containers' Security Context
## @param containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
## @param containerSecurityContext.runAsUser Set containers' Security Context runAsUser
## @param containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
## @param containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
## @param containerSecurityContext.privileged Set container's Security Context privileged
## @param containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
## @param containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
## @param containerSecurityContext.capabilities.drop List of capabilities to be dropped
## @param containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
##
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
## Keycloak resource requests and limits
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## @param resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).
## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
##
resourcesPreset: "small"
## @param resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
## Example:
## resources:
##   requests:
##     cpu: 2
##     memory: 512Mi
##   limits:
##     cpu: 3
##     memory: 1024Mi
##
resources: {}
## Configure extra options for Keycloak containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe on Keycloak containers
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
## @param readinessProbe.enabled Enable readinessProbe on Keycloak containers
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## When enabling this, make sure to set initialDelaySeconds to 0 for livenessProbe and readinessProbe
## @param startupProbe.enabled Enable startupProbe on Keycloak containers
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 60
  successThreshold: 1
## @param customLivenessProbe Custom Liveness probes for Keycloak
##
customLivenessProbe: {}
## @param customReadinessProbe Custom Rediness probes Keycloak
##
customReadinessProbe: {}
## @param customStartupProbe Custom Startup probes for Keycloak
##
customStartupProbe: {}
## @param lifecycleHooks LifecycleHooks to set additional configuration at startup
##
lifecycleHooks: {}
## @param automountServiceAccountToken Mount Service Account token in pod
##
automountServiceAccountToken: true
## @param hostAliases Deployment pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param podLabels Extra labels for Keycloak pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations Annotations for Keycloak pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param affinity Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
##
nodeSelector: {}
## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
##
topologySpreadConstraints: []
## @param podManagementPolicy Pod management policy for the Keycloak statefulset
##
podManagementPolicy: Parallel
## @param priorityClassName Keycloak pods' Priority Class Name
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
## @param schedulerName Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param terminationGracePeriodSeconds Seconds Keycloak pod needs to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: ""
## @param updateStrategy.type Keycloak statefulset strategy type
## @param updateStrategy.rollingUpdate Keycloak statefulset rolling update configuration parameters
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
##
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}
## @param minReadySeconds How many seconds a pod needs to be ready before killing the next, during update
##
minReadySeconds: 0
## @param extraVolumes Optionally specify extra list of additional volumes for Keycloak pods
##
extraVolumes: []
## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for Keycloak container(s)
##
extraVolumeMounts: []
## @param initContainers Add additional init containers to the Keycloak pods
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: []
## @param sidecars Add additional sidecar containers to the Keycloak pods
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []
## @section Exposure parameters
##

## Service configuration
##
service:
  ## @param service.type Kubernetes service type
  ##
  type: ClusterIP
  ## @param service.http.enabled Enable http port on service
  ##
  http:
    enabled: true
  ## @param service.ports.http Keycloak service HTTP port
  ## @param service.ports.https Keycloak service HTTPS port
  ##
  ports:
    http: 80
    https: 443
  ## @param service.nodePorts [object] Specify the nodePort values for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePorts:
    http: ""
    https: ""
  ## @param service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## Values: ClientIP or None
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}
  ## @param service.clusterIP Keycloak service clusterIP IP
  ## e.g:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP loadBalancerIP for the SuiteCRM Service (optional, cloud specific)
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges Address that are allowed when service is LoadBalancer
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## Example:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy Enable client source IP preservation
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for Keycloak service
  ##
  annotations: {}
  ## @param service.extraPorts Extra port to expose on Keycloak service
  ##
  extraPorts: []
  # DEPRECATED service.extraHeadlessPorts will be removed in a future release, please use service.headless.extraPorts instead
  ## @param service.extraHeadlessPorts Extra ports to expose on Keycloak headless service
  ##
  extraHeadlessPorts: []
  ## Headless service properties
  ##
  headless:
    ## @param service.headless.annotations Annotations for the headless service.
    ##
    annotations: {}
    ## @param service.headless.extraPorts Extra ports to expose on Keycloak headless service
    ##
    extraPorts: []
## Keycloak ingress parameters
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for Keycloak
  ##
  enabled: false
  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: ""
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.controller The ingress controller type. Currently supports `default` and `gce`
  ## leave as `default` for most ingress controllers.
  ## set to `gce` if using the GCE ingress controller
  ##
  controller: default
  ## @param ingress.hostname Default host for the ingress record (evaluated as template)
  ##
  hostname: keycloak.local
  ## @param ingress.hostnameStrict Disables dynamically resolving the hostname from request headers.
  ## Should always be set to true in production, unless your reverse proxy overwrites the Host header.
  ## If enabled, the hostname option needs to be specified.
  ##
  hostnameStrict: false
  ## @param ingress.path [string] Default path for the ingress record (evaluated as template)
  ##
  path: "{{ .Values.httpRelativePath }}"
  ## @param ingress.servicePort Backend service port to use
  ## Default is http. Alternative is https.
  ##
  servicePort: http
  ## @param ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: {}
  ## @param ingress.labels Additional labels for the Ingress resource.
  ## e.g:
  ## labels:
  ##   app: keycloak
  ##
  labels: {}
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.ingress.hostname .) }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: keycloak.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - keycloak.local
  ##   secretName: keycloak.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## - name: keycloak.local-tls
  ##   key:
  ##   certificate:
  ##
  secrets: []
  ## @param ingress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: airflow.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: airflow-svc
  ##           port:
  ##             name: http
  ##
  extraRules: []
## Keycloak admin ingress parameters
## ref: https://kubernetes.io/docs/user-guide/ingress/
##
adminIngress:
  ## @param adminIngress.enabled Enable admin ingress record generation for Keycloak
  ##
  enabled: false
  ## @param adminIngress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: ""
  ## @param adminIngress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param adminIngress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param adminIngress.controller The ingress controller type. Currently supports `default` and `gce`
  ## leave as `default` for most ingress controllers.
  ## set to `gce` if using the GCE ingress controller
  ##
  controller: default
  ## @param adminIngress.hostname Default host for the admin ingress record (evaluated as template)
  ##
  hostname: keycloak.local
  ## @param adminIngress.path [string] Default path for the admin ingress record (evaluated as template)
  ##
  path: "{{ .Values.httpRelativePath }}"
  ## @param adminIngress.servicePort Backend service port to use
  ## Default is http. Alternative is https.
  ##
  servicePort: http
  ## @param adminIngress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: {}
  ## @param adminIngress.labels Additional labels for the Ingress resource.
  ## e.g:
  ## labels:
  ##   app: keycloak
  ##
  labels: {}
  ## @param adminIngress.tls Enable TLS configuration for the host defined at `adminIngress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.adminIngress.hostname .) }}`
  ## You can:
  ##   - Use the `adminIngress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `adminIngress.selfSigned=true`
  ##
  tls: false
  ## @param adminIngress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param adminIngress.extraHosts An array with additional hostname(s) to be covered with the admin ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: keycloak.local
  ##     path: /
  ##
  extraHosts: []
  ## @param adminIngress.extraPaths Any additional arbitrary paths that may need to be added to the admin ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param adminIngress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - keycloak.local
  ##   secretName: keycloak.local-tls
  ##
  extraTls: []
  ## @param adminIngress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## - name: keycloak.local-tls
  ##   key:
  ##   certificate:
  ##
  secrets: []
  ## @param adminIngress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: airflow.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: airflow-svc
  ##           port:
  ##             name: http
  ##
  extraRules: []
## Network Policy configuration
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
##
networkPolicy:
  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  ##
  enabled: true
  ## @param networkPolicy.allowExternal Don't require server label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## server label will have network access to the ports server is listening
  ## on. When true, server will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true
  ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
  ##
  allowExternalEgress: true
  ## @param networkPolicy.kubeAPIServerPorts [array] List of possible endpoints to kube-apiserver (limit to your cluster settings to increase security)
  ##
  kubeAPIServerPorts: [443, 6443, 8443]
  ## @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
  ## e.g:
  ## extraIngress:
  ##   - ports:
  ##       - port: 1234
  ##     from:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  extraIngress: []
  ## @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
  ## e.g:
  ## extraEgress:
  ##   - ports:
  ##       - port: 1234
  ##     to:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  ##
  extraEgress: []
  ## @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
  ## @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
  ##
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
## @section RBAC parameter
## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  ## @param serviceAccount.create Enable the creation of a ServiceAccount for Keycloak pods
  ##
  create: true
  ## @param serviceAccount.name Name of the created ServiceAccount
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Auto-mount the service account token in the pod
  ##
  automountServiceAccountToken: false
  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
  ##
  annotations: {}
  ## @param serviceAccount.extraLabels Additional labels for the ServiceAccount
  ##
  extraLabels: {}
## Specifies whether RBAC resources should be created
##
rbac:
  ## @param rbac.create Whether to create and use RBAC resources or not
  ##
  create: false
  ## @param rbac.rules Custom RBAC rules
  ## Example:
  ## rules:
  ##   - apiGroups:
  ##       - ""
  ##     resources:
  ##       - pods
  ##     verbs:
  ##       - get
  ##       - list
  ##
  rules: []
## @section Other parameters
##

## Keycloak Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
##
pdb:
  ## @param pdb.create Enable/disable a Pod Disruption Budget creation
  ##
  create: true
  ## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ##
  minAvailable: ""
  ## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  maxUnavailable: ""
## Keycloak Autoscaling configuration
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
## @param autoscaling.enabled Enable autoscaling for Keycloak
## @param autoscaling.minReplicas Minimum number of Keycloak replicas
## @param autoscaling.maxReplicas Maximum number of Keycloak replicas
## @param autoscaling.targetCPU Target CPU utilization percentage
## @param autoscaling.targetMemory Target Memory utilization percentage
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ""
  targetMemory: ""
  ## HPA Scaling Behavior
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#configurable-scaling-behavior
  ##
  behavior:
    ## HPA behavior when scaling up
    ## @param autoscaling.behavior.scaleUp.stabilizationWindowSeconds The number of seconds for which past recommendations should be considered while scaling up
    ## @param autoscaling.behavior.scaleUp.selectPolicy The priority of policies that the autoscaler will apply when scaling up
    ## @param autoscaling.behavior.scaleUp.policies [array] HPA scaling policies when scaling up
    ## e.g:
    ## Policy to scale 20% of the pod in 60s
    ## - type: Percent
    ##   value: 20
    ##   periodSeconds: 60
    ##
    scaleUp:
      stabilizationWindowSeconds: 120
      selectPolicy: Max
      policies: []
    ## HPA behavior when scaling down
    ## @param autoscaling.behavior.scaleDown.stabilizationWindowSeconds The number of seconds for which past recommendations should be considered while scaling down
    ## @param autoscaling.behavior.scaleDown.selectPolicy The priority of policies that the autoscaler will apply when scaling down
    ## @param autoscaling.behavior.scaleDown.policies [array] HPA scaling policies when scaling down
    ## e.g:
    ## Policy to scale one pod in 300s
    ## - type: Pods
    ##   value: 1
    ##   periodSeconds: 300
    ##
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Max
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300
## @section Metrics parameters
##

## Metrics configuration
##
metrics:
  ## @param metrics.enabled Enable exposing Keycloak statistics
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#enabling-statistics
  ##
  enabled: false
  ## Keycloak metrics service parameters
  ##
  service:
    ## @param metrics.service.ports.http Metrics service HTTP port
    ##
    ports:
      http: 8080
    ## @param metrics.service.annotations [object] Annotations for enabling prometheus to access the metrics endpoints
    ##
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.http }}"
    ## @param metrics.service.extraPorts [array] Add additional ports to the keycloak metrics service (i.e. admin port 9000)
    ##
    extraPorts: []
  ## Prometheus Operator ServiceMonitor configuration
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.port Metrics service HTTP port
    ##
    port: http
    ## @param metrics.serviceMonitor.endpoints [array] The endpoint configuration of the ServiceMonitor. Path is mandatory. Interval, timeout and labellings can be overwritten.
    ##
    endpoints:
      - path: '{{ include "keycloak.httpPath" . }}metrics'
      - path: '{{ include "keycloak.httpPath" . }}realms/{{ .Values.adminRealm }}/metrics'
    ## @param metrics.serviceMonitor.path Metrics service HTTP path. Deprecated: Use @param metrics.serviceMonitor.endpoints instead
    ##
    path: ""
    ## @param metrics.serviceMonitor.namespace Namespace which Prometheus is running in
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    ##
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
    ## e.g:
    ##   scrapeTimeout: 30s
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.labels Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
    ##
    labels: {}
    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
    ##
    selector: {}
    ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels honorLabels chooses the metric's labels on collisions with target labels
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
    ##
    jobLabel: ""
  ## Prometheus Operator alert rules configuration
  ##
  prometheusRule:
    ## @param metrics.prometheusRule.enabled Create PrometheusRule Resource for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.prometheusRule.namespace Namespace which Prometheus is running in
    ##
    namespace: ""
    ## @param metrics.prometheusRule.labels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
    ##
    labels: {}
    ## @param metrics.prometheusRule.groups Groups, containing the alert rules.
    ## Example:
    ##   groups:
    ##     - name: Keycloak
    ##       rules:
    ##         - alert: KeycloakInstanceNotAvailable
    ##           annotations:
    ##             message: "Keycloak instance in namespace {{ `{{` }} $labels.namespace {{ `}}` }} has not been available for the last 5 minutes."
    ##           expr: |
    ##             absent(kube_pod_status_ready{namespace="{{ include "common.names.namespace" . }}", condition="true"} * on (pod) kube_pod_labels{pod=~"{{ include "common.names.fullname" . }}-\\d+", namespace="{{ include "common.names.namespace" . }}"}) != 0
    ##           for: 5m
    ##           labels:
    ##             severity: critical
    groups: []
## @section keycloak-config-cli parameters

## Configuration for keycloak-config-cli
## ref: https://github.com/adorsys/keycloak-config-cli
##
keycloakConfigCli:
  ## @param keycloakConfigCli.enabled Whether to enable keycloak-config-cli job
  ##
  enabled: true
  ## Bitnami keycloak-config-cli image
  ## ref: https://hub.docker.com/r/bitnami/keycloak-config-cli/tags/
  ## @param keycloakConfigCli.image.registry [default: REGISTRY_NAME] keycloak-config-cli container image registry
  ## @param keycloakConfigCli.image.repository [default: REPOSITORY_NAME/keycloak-config-cli] keycloak-config-cli container image repository
  ## @skip keycloakConfigCli.image.tag keycloak-config-cli container image tag
  ## @param keycloakConfigCli.image.digest keycloak-config-cli container image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param keycloakConfigCli.image.pullPolicy keycloak-config-cli container image pull policy
  ## @param keycloakConfigCli.image.pullSecrets keycloak-config-cli container image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 6.2.0-debian-12-r0
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param keycloakConfigCli.annotations [object] Annotations for keycloak-config-cli job
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  annotations:
    helm.sh/hook: "post-install,post-upgrade,post-rollback"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "5"
  ## @param keycloakConfigCli.command Command for running the container (set to default if not set). Use array form
  ##
  command: []
  ## @param keycloakConfigCli.args Args for running the container (set to default if not set). Use array form
  ##
  args: []
  ## @param keycloakConfigCli.automountServiceAccountToken Mount Service Account token in pod
  ##
  automountServiceAccountToken: true
  ## @param keycloakConfigCli.hostAliases Job pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## Keycloak config CLI resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param keycloakConfigCli.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if keycloakConfigCli.resources is set (keycloakConfigCli.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "small"
  ## @param keycloakConfigCli.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## keycloak-config-cli containers' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param keycloakConfigCli.containerSecurityContext.enabled Enabled keycloak-config-cli Security Context
  ## @param keycloakConfigCli.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param keycloakConfigCli.containerSecurityContext.runAsUser Set keycloak-config-cli Security Context runAsUser
  ## @param keycloakConfigCli.containerSecurityContext.runAsGroup Set keycloak-config-cli Security Context runAsGroup
  ## @param keycloakConfigCli.containerSecurityContext.runAsNonRoot Set keycloak-config-cli Security Context runAsNonRoot
  ## @param keycloakConfigCli.containerSecurityContext.privileged Set keycloak-config-cli Security Context privileged
  ## @param keycloakConfigCli.containerSecurityContext.readOnlyRootFilesystem Set keycloak-config-cli Security Context readOnlyRootFilesystem
  ## @param keycloakConfigCli.containerSecurityContext.allowPrivilegeEscalation Set keycloak-config-cli Security Context allowPrivilegeEscalation
  ## @param keycloakConfigCli.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param keycloakConfigCli.containerSecurityContext.seccompProfile.type Set keycloak-config-cli Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## keycloak-config-cli pods' Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param keycloakConfigCli.podSecurityContext.enabled Enabled keycloak-config-cli pods' Security Context
  ## @param keycloakConfigCli.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param keycloakConfigCli.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param keycloakConfigCli.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param keycloakConfigCli.podSecurityContext.fsGroup Set keycloak-config-cli pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## @param keycloakConfigCli.backoffLimit Number of retries before considering a Job as failed
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy
  ##
  backoffLimit: 1
  ## @param keycloakConfigCli.podLabels Pod extra labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param keycloakConfigCli.podAnnotations Annotations for job pod
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param keycloakConfigCli.extraEnvVars Additional environment variables to set
  ## Example:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  ## @param keycloakConfigCli.nodeSelector Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ##
  ## @param keycloakConfigCli.podTolerations Tolerations for job pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  podTolerations: []
  extraEnvVars: []
  ## @param keycloakConfigCli.extraEnvVarsCM ConfigMap with extra environment variables
  ##
  extraEnvVarsCM: ""
  ## @param keycloakConfigCli.extraEnvVarsSecret Secret with extra environment variables
  ##
  extraEnvVarsSecret: ""
  ## @param keycloakConfigCli.extraVolumes Extra volumes to add to the job
  ##
  extraVolumes: []
  ## @param keycloakConfigCli.extraVolumeMounts Extra volume mounts to add to the container
  ##
  extraVolumeMounts: []
  ## @param keycloakConfigCli.initContainers Add additional init containers to the Keycloak config cli pod
  ## Example:
  ## initContainers:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  initContainers: []
  ## @param keycloakConfigCli.sidecars Add additional sidecar containers to the Keycloak config cli pod
  ## Example:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param keycloakConfigCli.configuration keycloak-config-cli realms configuration
  ## NOTE: nil keys will be considered files to import locally
  ## Example:
  ## configuration:
  ##   realm1.json: |
  ##     {
  ##       "realm": "realm1",
  ##       "clients": []
  ##     }
  ##   realm2.yaml: |
  ##     realm: realm2
  ##     clients: []
  ##
  configuration:
    obsrv.json: |
      {
        "id": "78b14577-d627-476d-b308-217929a6ae0f",
        "realm": "obsrvWebConsole",
        "displayName": "Obsrv",
        "displayNameHtml": "",
        "notBefore": 0,
        "defaultSignatureAlgorithm": "RS256",
        "revokeRefreshToken": false,
        "refreshTokenMaxReuse": 0,
        "accessTokenLifespan": 300,
        "accessTokenLifespanForImplicitFlow": 900,
        "ssoSessionIdleTimeout": 1800,
        "ssoSessionMaxLifespan": 36000,
        "ssoSessionIdleTimeoutRememberMe": 0,
        "ssoSessionMaxLifespanRememberMe": 0,
        "offlineSessionIdleTimeout": 2592000,
        "offlineSessionMaxLifespanEnabled": false,
        "offlineSessionMaxLifespan": 5184000,
        "clientSessionIdleTimeout": 0,
        "clientSessionMaxLifespan": 0,
        "clientOfflineSessionIdleTimeout": 0,
        "clientOfflineSessionMaxLifespan": 0,
        "accessCodeLifespan": 60,
        "accessCodeLifespanUserAction": 300,
        "accessCodeLifespanLogin": 1800,
        "actionTokenGeneratedByAdminLifespan": 43200,
        "actionTokenGeneratedByUserLifespan": 300,
        "oauth2DeviceCodeLifespan": 600,
        "oauth2DevicePollingInterval": 5,
        "enabled": true,
        "sslRequired": "external",
        "registrationAllowed": false,
        "registrationEmailAsUsername": false,
        "rememberMe": false,
        "verifyEmail": false,
        "loginWithEmailAllowed": true,
        "duplicateEmailsAllowed": false,
        "resetPasswordAllowed": false,
        "editUsernameAllowed": false,
        "bruteForceProtected": false,
        "permanentLockout": false,
        "maxTemporaryLockouts": 0,
        "maxFailureWaitSeconds": 900,
        "minimumQuickLoginWaitSeconds": 60,
        "waitIncrementSeconds": 60,
        "quickLoginCheckMilliSeconds": 1000,
        "maxDeltaTimeSeconds": 43200,
        "failureFactor": 30,
        "roles": {
          "realm": [
            {
              "id": "9159a352-e046-4f5f-b83c-73b303839cf6",
              "name": "default-roles-obsrv-web-console",
              "description": "${role_default-roles}",
              "composite": true,
              "composites": {
                "realm": [
                  "offline_access",
                  "uma_authorization"
                ],
                "client": {
                  "realm-management": [
                    "manage-authorization",
                    "view-realm",
                    "manage-users",
                    "view-clients",
                    "query-clients",
                    "realm-admin",
                    "manage-realm",
                    "query-users",
                    "view-authorization",
                    "view-users",
                    "manage-clients",
                    "query-realms",
                    "query-groups",
                    "create-client"
                  ],
                  "broker": [
                    "read-token"
                  ],
                  "account": [
                    "view-profile",
                    "view-applications",
                    "manage-account"
                  ]
                }
              },
              "clientRole": false,
              "containerId": "78b14577-d627-476d-b308-217929a6ae0f",
              "attributes": {}
            },
            {
              "id": "74559944-38ac-45e2-8170-5fc4c76eb51f",
              "name": "uma_authorization",
              "description": "${role_uma_authorization}",
              "composite": false,
              "clientRole": false,
              "containerId": "78b14577-d627-476d-b308-217929a6ae0f",
              "attributes": {}
            },
            {
              "id": "747cf06e-7fd6-43d0-9653-df2fc133e54f",
              "name": "offline_access",
              "description": "${role_offline-access}",
              "composite": false,
              "clientRole": false,
              "containerId": "78b14577-d627-476d-b308-217929a6ae0f",
              "attributes": {}
            }
          ],
          "client": {
            "realm-management": [
              {
                "id": "9c22cb77-d832-4c95-bf1b-c0127c87ac76",
                "name": "manage-authorization",
                "description": "${role_manage-authorization}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "f84a019f-edad-4de6-8f06-49e880703283",
                "name": "view-realm",
                "description": "${role_view-realm}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "523b6e72-0d2a-4160-b16d-b1fa393c976e",
                "name": "view-events",
                "description": "${role_view-events}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "46746835-45c5-485e-bb55-455d358f83d9",
                "name": "manage-users",
                "description": "${role_manage-users}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "6106e333-d98b-47a6-bccc-e46735525ddc",
                "name": "manage-identity-providers",
                "description": "${role_manage-identity-providers}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "6192f48c-4595-4d56-843a-69d159813c14",
                "name": "view-clients",
                "description": "${role_view-clients}",
                "composite": true,
                "composites": {
                  "client": {
                    "realm-management": [
                      "query-clients"
                    ]
                  }
                },
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "d9679eff-5db0-425a-baa4-67f45eb7d7cd",
                "name": "query-clients",
                "description": "${role_query-clients}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "402e2ce2-8d96-4eed-87c1-74ec8a50b971",
                "name": "impersonation",
                "description": "${role_impersonation}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "91581f46-7db8-453c-ae96-3e230fbaf4c3",
                "name": "manage-realm",
                "description": "${role_manage-realm}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "8556429e-7f26-4849-b6e0-bb5b4d413adc",
                "name": "realm-admin",
                "description": "${role_realm-admin}",
                "composite": true,
                "composites": {
                  "client": {
                    "realm-management": [
                      "manage-authorization",
                      "view-realm",
                      "view-events",
                      "manage-users",
                      "manage-identity-providers",
                      "view-clients",
                      "query-clients",
                      "impersonation",
                      "manage-realm",
                      "query-users",
                      "view-authorization",
                      "view-identity-providers",
                      "view-users",
                      "manage-events",
                      "manage-clients",
                      "query-realms",
                      "query-groups",
                      "create-client"
                    ]
                  }
                },
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "38278419-6b26-4aa4-a37c-b40b657f6c9c",
                "name": "query-users",
                "description": "${role_query-users}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "642cfe0d-7e2b-4fb0-9418-59da255cf69c",
                "name": "view-authorization",
                "description": "${role_view-authorization}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "f65b9214-8bdc-498b-96c7-6ec32c9c17c7",
                "name": "view-identity-providers",
                "description": "${role_view-identity-providers}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "5b505972-9f75-4cd7-b491-026a3fc86171",
                "name": "manage-events",
                "description": "${role_manage-events}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "095b5244-1b32-47af-b21f-5b02d4e07f89",
                "name": "view-users",
                "description": "${role_view-users}",
                "composite": true,
                "composites": {
                  "client": {
                    "realm-management": [
                      "query-users",
                      "query-groups"
                    ]
                  }
                },
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "fe5c6a09-253c-4248-9255-b13fd9940e0e",
                "name": "manage-clients",
                "description": "${role_manage-clients}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "c1e1ad7e-197a-4620-9372-57a459cc9e34",
                "name": "query-realms",
                "description": "${role_query-realms}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "9c0bccf3-ddbc-4112-b3b6-d66aaf335510",
                "name": "query-groups",
                "description": "${role_query-groups}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              },
              {
                "id": "e98a3991-9b1f-42c4-b050-be9e43c2584e",
                "name": "create-client",
                "description": "${role_create-client}",
                "composite": false,
                "clientRole": true,
                "containerId": "3439b804-db56-476a-83a1-3f486dbebd1c",
                "attributes": {}
              }
            ],
            "webConsole": [],
            "security-admin-console": [],
            "admin-cli": [],
            "account-console": [],
            "broker": [
              {
                "id": "c4c1d7dc-e3e3-4acd-a34f-a6ae87525153",
                "name": "read-token",
                "description": "${role_read-token}",
                "composite": false,
                "clientRole": true,
                "containerId": "d0096726-299b-4714-b1e3-fa7e3a4a2a1f",
                "attributes": {}
              }
            ],
            "account": [
              {
                "id": "fadd43ec-9234-4ea5-a132-7b57f89dd140",
                "name": "view-groups",
                "description": "${role_view-groups}",
                "composite": false,
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              },
              {
                "id": "2850a71a-033b-4559-875e-dfed4407e0c2",
                "name": "view-profile",
                "description": "${role_view-profile}",
                "composite": false,
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              },
              {
                "id": "920eb045-9c7a-40b0-8167-0c741d2fc06b",
                "name": "view-applications",
                "description": "${role_view-applications}",
                "composite": false,
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              },
              {
                "id": "f15560e4-187d-4e19-ad9c-9840d2fe5084",
                "name": "manage-consent",
                "description": "${role_manage-consent}",
                "composite": true,
                "composites": {
                  "client": {
                    "account": [
                      "view-consent"
                    ]
                  }
                },
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              },
              {
                "id": "d8393ff4-ee07-4611-a0a7-e17564815324",
                "name": "manage-account-links",
                "description": "${role_manage-account-links}",
                "composite": false,
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              },
              {
                "id": "cc10f42e-a5e2-4e11-9911-09ed51614df8",
                "name": "delete-account",
                "description": "${role_delete-account}",
                "composite": false,
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              },
              {
                "id": "b4b2a375-5789-4e0a-92bb-526166d1b9b8",
                "name": "manage-account",
                "description": "${role_manage-account}",
                "composite": true,
                "composites": {
                  "client": {
                    "account": [
                      "manage-account-links"
                    ]
                  }
                },
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              },
              {
                "id": "1cef1963-3a45-4904-9c8d-852e6a73d04e",
                "name": "view-consent",
                "description": "${role_view-consent}",
                "composite": false,
                "clientRole": true,
                "containerId": "2573618b-38d1-4742-bc3a-5342f56d5996",
                "attributes": {}
              }
            ]
          }
        },
        "groups": [],
        "defaultRole": {
          "id": "9159a352-e046-4f5f-b83c-73b303839cf6",
          "name": "default-roles-obsrv-web-console",
          "description": "${role_default-roles}",
          "composite": true,
          "clientRole": false,
          "containerId": "78b14577-d627-476d-b308-217929a6ae0f"
        },
        "requiredCredentials": [
          "password"
        ],
        "otpPolicyType": "totp",
        "otpPolicyAlgorithm": "HmacSHA1",
        "otpPolicyInitialCounter": 0,
        "otpPolicyDigits": 6,
        "otpPolicyLookAheadWindow": 1,
        "otpPolicyPeriod": 30,
        "otpPolicyCodeReusable": false,
        "otpSupportedApplications": [
          "totpAppFreeOTPName",
          "totpAppGoogleName",
          "totpAppMicrosoftAuthenticatorName"
        ],
        "localizationTexts": {},
        "webAuthnPolicyRpEntityName": "keycloak",
        "webAuthnPolicySignatureAlgorithms": [
          "ES256"
        ],
        "webAuthnPolicyRpId": "",
        "webAuthnPolicyAttestationConveyancePreference": "not specified",
        "webAuthnPolicyAuthenticatorAttachment": "not specified",
        "webAuthnPolicyRequireResidentKey": "not specified",
        "webAuthnPolicyUserVerificationRequirement": "not specified",
        "webAuthnPolicyCreateTimeout": 0,
        "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
        "webAuthnPolicyAcceptableAaguids": [],
        "webAuthnPolicyExtraOrigins": [],
        "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
        "webAuthnPolicyPasswordlessSignatureAlgorithms": [
          "ES256"
        ],
        "webAuthnPolicyPasswordlessRpId": "",
        "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
        "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
        "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
        "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
        "webAuthnPolicyPasswordlessCreateTimeout": 0,
        "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
        "webAuthnPolicyPasswordlessAcceptableAaguids": [],
        "webAuthnPolicyPasswordlessExtraOrigins": [],
        "scopeMappings": [
          {
            "clientScope": "offline_access",
            "roles": [
              "offline_access"
            ]
          }
        ],
        "clientScopeMappings": {
          "account": [
            {
              "client": "account-console",
              "roles": [
                "manage-account",
                "view-groups"
              ]
            }
          ]
        },
        "clients": [
          {
            "id": "2573618b-38d1-4742-bc3a-5342f56d5996",
            "clientId": "account",
            "name": "${client_account}",
            "rootUrl": "${authBaseUrl}",
            "baseUrl": "/realms/obsrvWebConsole/account/",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [
              "/realms/obsrvWebConsole/account/*"
            ],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "realm_client": "false",
              "post.logout.redirect.uris": "+"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "basic",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "81fef311-a6b8-485a-b255-56411741c7eb",
            "clientId": "account-console",
            "name": "${client_account-console}",
            "rootUrl": "${authBaseUrl}",
            "baseUrl": "/realms/obsrvWebConsole/account/",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [
              "/realms/obsrvWebConsole/account/*"
            ],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "realm_client": "false",
              "post.logout.redirect.uris": "+",
              "pkce.code.challenge.method": "S256"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "protocolMappers": [
              {
                "id": "431cb021-fbab-477e-97a5-da3f997942f6",
                "name": "audience resolve",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-audience-resolve-mapper",
                "consentRequired": false,
                "config": {}
              }
            ],
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "basic",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "ad878d83-aead-48b1-b6b6-1df7cc4cc921",
            "clientId": "admin-cli",
            "name": "${client_admin-cli}",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": false,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": true,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "realm_client": "false",
              "client.use.lightweight.access.token.enabled": "true",
              "post.logout.redirect.uris": "+"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": true,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "basic",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "d0096726-299b-4714-b1e3-fa7e3a4a2a1f",
            "clientId": "broker",
            "name": "${client_broker}",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": true,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": false,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "realm_client": "true",
              "post.logout.redirect.uris": "+"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "basic",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "3439b804-db56-476a-83a1-3f486dbebd1c",
            "clientId": "realm-management",
            "name": "${client_realm-management}",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [],
            "webOrigins": [],
            "notBefore": 0,
            "bearerOnly": true,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": false,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "realm_client": "true",
              "post.logout.redirect.uris": "+"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": false,
            "nodeReRegistrationTimeout": 0,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "basic",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "3fe9dad6-dce7-48d7-9b08-b69893a4525c",
            "clientId": "security-admin-console",
            "name": "${client_security-admin-console}",
            "rootUrl": "${authAdminUrl}",
            "baseUrl": "/admin/obsrvWebConsole/console/",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [
              "/admin/obsrvWebConsole/console/*"
            ],
            "webOrigins": [
              "+"
            ],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
              "realm_client": "false",
              "client.use.lightweight.access.token.enabled": "true",
              "post.logout.redirect.uris": "+",
              "pkce.code.challenge.method": "S256"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": true,
            "nodeReRegistrationTimeout": 0,
            "protocolMappers": [
              {
                "id": "d0d1c900-e4de-4ab2-a509-dafca044d8e7",
                "name": "locale",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "locale",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "locale",
                  "jsonType.label": "String"
                }
              }
            ],
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "basic",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          },
          {
            "id": "37d65a90-ae57-40bd-b15c-2d76dd1acaea",
            "clientId": "webConsole",
            "name": "webConsole",
            "description": "",
            "rootUrl": "",
            "adminUrl": "",
            "baseUrl": "",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [
              "http://localhost:3000/console",
              "http://localhost:3000/console?auth_callback=1",
              "http://localhost:3000/console/*",
              "http://localhost:3000/*",
              "http://localhost",
              "http://localhost:8501",
              "http://localhost:8501/*"
            ],
            "webOrigins": [
              "http://localhost:3000/console",
              "http://localhost:3000/*",
              "*",
              "http://localhost:8501/*"
            ],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": true,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": true,
            "protocol": "openid-connect",
            "attributes": {
              "client.introspection.response.allow.jwt.claim.enabled": "false",
              "login_theme": "keycloak",
              "post.logout.redirect.uris": "+##http://localhost:3000/console##http://localhost:3000##http://localhost:3000/*##http://localhost:3000/console/*##",
              "oauth2.device.authorization.grant.enabled": "false",
              "backchannel.logout.revoke.offline.tokens": "false",
              "use.refresh.tokens": "true",
              "exclude.session.state.from.auth.response": "true",
              "realm_client": "false",
              "oidc.ciba.grant.enabled": "false",
              "client.use.lightweight.access.token.enabled": "false",
              "exclude.issuer.from.auth.response": "true",
              "backchannel.logout.session.required": "true",
              "client_credentials.use_refresh_token": "false",
              "acr.loa.map": "{}",
              "require.pushed.authorization.requests": "false",
              "tls.client.certificate.bound.access.tokens": "false",
              "display.on.consent.screen": "false",
              "token.response.type.bearer.lower-case": "false"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": true,
            "nodeReRegistrationTimeout": -1,
            "defaultClientScopes": [
              "web-origins",
              "acr",
              "profile",
              "roles",
              "basic",
              "email"
            ],
            "optionalClientScopes": [
              "address",
              "phone",
              "offline_access",
              "microprofile-jwt"
            ]
          }
        ],
        "clientScopes": [
          {
            "id": "6b27ae3e-b678-4b5d-92bc-7b19f03ef428",
            "name": "role_list",
            "description": "SAML role list",
            "protocol": "saml",
            "attributes": {
              "consent.screen.text": "${samlRoleListScopeConsentText}",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "id": "180bba10-0ce8-4d19-88a5-9cefb855833a",
                "name": "role list",
                "protocol": "saml",
                "protocolMapper": "saml-role-list-mapper",
                "consentRequired": false,
                "config": {
                  "single": "false",
                  "attribute.nameformat": "Basic",
                  "attribute.name": "Role"
                }
              }
            ]
          },
          {
            "id": "19c74dd3-c4a5-422e-9b14-58d01e40aa24",
            "name": "microprofile-jwt",
            "description": "Microprofile - JWT built-in scope",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "display.on.consent.screen": "false"
            },
            "protocolMappers": [
              {
                "id": "cb5e30e9-28e7-4baf-a9d9-762e9ef7a343",
                "name": "groups",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-realm-role-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "multivalued": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "foo",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "groups",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "8990475c-b8cd-400f-8b04-f293e0a14fd5",
                "name": "upn",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "username",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "upn",
                  "jsonType.label": "String"
                }
              }
            ]
          },
          {
            "id": "b6ebd932-269e-4191-b75e-e4475dc5d886",
            "name": "profile",
            "description": "OpenID Connect built-in scope: profile",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "consent.screen.text": "${profileScopeConsentText}",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "id": "8022337e-296b-413c-9610-465134b888ac",
                "name": "given name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "firstName",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "given_name",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "4a075ca1-e4eb-4af1-8ac7-d9c6c0bac13b",
                "name": "nickname",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "nickname",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "nickname",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "bbad86a7-2239-43dc-b146-aa952cb9d475",
                "name": "picture",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "picture",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "picture",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "927668ac-b29f-4280-86e6-60bc3b73e139",
                "name": "locale",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "locale",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "locale",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "d1936326-ff4c-494b-a03f-032f8ef5ba6c",
                "name": "updated at",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "updatedAt",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "updated_at",
                  "jsonType.label": "long"
                }
              },
              {
                "id": "8be8c39a-9870-4c7a-aa4a-499fd0474010",
                "name": "birthdate",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "birthdate",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "birthdate",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "a61a0983-8c02-4e8b-a3c0-c5a35c2e9a39",
                "name": "username",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "username",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "preferred_username",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "ed96b8f8-9066-4b81-a728-1940f16d863b",
                "name": "website",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "website",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "website",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "5f2b13c9-f750-4a1f-a4d0-f680ab35ecc3",
                "name": "profile",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "profile",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "profile",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "04d37a20-1fb7-4417-a1c3-335275979494",
                "name": "middle name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "middleName",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "middle_name",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "f35c29c0-dfd3-449f-a3cd-0627eee6f792",
                "name": "family name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "lastName",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "family_name",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "dd071903-3814-40fb-8017-5bd87774eb4c",
                "name": "full name",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-full-name-mapper",
                "consentRequired": false,
                "config": {
                  "id.token.claim": "true",
                  "introspection.token.claim": "true",
                  "access.token.claim": "true",
                  "userinfo.token.claim": "true"
                }
              },
              {
                "id": "b056e319-da03-4d00-b675-3617299f8aac",
                "name": "zoneinfo",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "zoneinfo",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "zoneinfo",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "f96ed370-5dd7-487a-b75c-caa7a5093c1d",
                "name": "gender",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "gender",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "gender",
                  "jsonType.label": "String"
                }
              }
            ]
          },
          {
            "id": "5ed23b98-22e0-4669-b082-5a2a8c654849",
            "name": "email",
            "description": "OpenID Connect built-in scope: email",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "consent.screen.text": "${emailScopeConsentText}",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "id": "29e7f912-b64d-4b01-9924-52f14bcb7118",
                "name": "email verified",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-property-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "emailVerified",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "email_verified",
                  "jsonType.label": "boolean"
                }
              },
              {
                "id": "a4301fd0-a3bd-4141-8360-9f4763596431",
                "name": "email",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "email",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "email",
                  "jsonType.label": "String"
                }
              }
            ]
          },
          {
            "id": "666f02d7-c746-4833-a674-5ef96161455c",
            "name": "phone",
            "description": "OpenID Connect built-in scope: phone",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "consent.screen.text": "${phoneScopeConsentText}",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "id": "dc238031-426c-4e9f-9cf0-6682a7c4e2ca",
                "name": "phone number",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "phoneNumber",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "phone_number",
                  "jsonType.label": "String"
                }
              },
              {
                "id": "13cf22a5-b780-44b1-a9e7-00898b4e8cff",
                "name": "phone number verified",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-attribute-mapper",
                "consentRequired": false,
                "config": {
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "user.attribute": "phoneNumberVerified",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "phone_number_verified",
                  "jsonType.label": "boolean"
                }
              }
            ]
          },
          {
            "id": "716a4727-f7ae-4712-b448-3d500a45382d",
            "name": "basic",
            "description": "OpenID Connect scope for add all basic claims to the token",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "false",
              "display.on.consent.screen": "false"
            },
            "protocolMappers": [
              {
                "id": "c8edd47f-e7cc-4349-9165-81ae13a8f678",
                "name": "auth_time",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usersessionmodel-note-mapper",
                "consentRequired": false,
                "config": {
                  "user.session.note": "AUTH_TIME",
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true",
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "auth_time",
                  "jsonType.label": "long"
                }
              },
              {
                "id": "fcea0944-da9c-4223-b807-a907af5a0f3f",
                "name": "sub",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-sub-mapper",
                "consentRequired": false,
                "config": {
                  "access.token.claim": "true",
                  "introspection.token.claim": "true"
                }
              }
            ]
          },
          {
            "id": "4451e814-78d9-45ce-b91a-2d653ada6af3",
            "name": "offline_access",
            "description": "OpenID Connect built-in scope: offline_access",
            "protocol": "openid-connect",
            "attributes": {
              "consent.screen.text": "${offlineAccessScopeConsentText}",
              "display.on.consent.screen": "true"
            }
          },
          {
            "id": "c12282b8-8043-4f69-80e1-890895527677",
            "name": "acr",
            "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "false",
              "display.on.consent.screen": "false"
            },
            "protocolMappers": [
              {
                "id": "e6a78bbc-7030-4b22-8f0f-25fe39c87998",
                "name": "acr loa level",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-acr-mapper",
                "consentRequired": false,
                "config": {
                  "id.token.claim": "true",
                  "access.token.claim": "true",
                  "introspection.token.claim": "true",
                  "userinfo.token.claim": "true"
                }
              }
            ]
          },
          {
            "id": "870905bb-eed3-455c-968e-925acb5db590",
            "name": "roles",
            "description": "OpenID Connect scope for add user roles to the access token",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "false",
              "consent.screen.text": "${rolesScopeConsentText}",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "id": "f568062c-9377-4e25-b588-ca74945d7073",
                "name": "client roles",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-client-role-mapper",
                "consentRequired": false,
                "config": {
                  "user.attribute": "foo",
                  "introspection.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "resource_access.${client_id}.roles",
                  "jsonType.label": "String",
                  "multivalued": "true"
                }
              },
              {
                "id": "fb94b38c-9f8d-471d-bd8d-8bfdd9eff440",
                "name": "realm roles",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-realm-role-mapper",
                "consentRequired": false,
                "config": {
                  "user.attribute": "foo",
                  "introspection.token.claim": "true",
                  "access.token.claim": "true",
                  "claim.name": "realm_access.roles",
                  "jsonType.label": "String",
                  "multivalued": "true"
                }
              },
              {
                "id": "d3d9385d-08e5-47a7-ab25-15a1db3295b1",
                "name": "audience resolve",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-audience-resolve-mapper",
                "consentRequired": false,
                "config": {
                  "access.token.claim": "true",
                  "introspection.token.claim": "true"
                }
              }
            ]
          },
          {
            "id": "9563c48e-8521-4050-8aef-7b9439da4fbf",
            "name": "address",
            "description": "OpenID Connect built-in scope: address",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "true",
              "consent.screen.text": "${addressScopeConsentText}",
              "display.on.consent.screen": "true"
            },
            "protocolMappers": [
              {
                "id": "0549f54d-a038-4564-bab3-f83992a2bf31",
                "name": "address",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-address-mapper",
                "consentRequired": false,
                "config": {
                  "user.attribute.formatted": "formatted",
                  "user.attribute.country": "country",
                  "introspection.token.claim": "true",
                  "user.attribute.postal_code": "postal_code",
                  "userinfo.token.claim": "true",
                  "user.attribute.street": "street",
                  "id.token.claim": "true",
                  "user.attribute.region": "region",
                  "access.token.claim": "true",
                  "user.attribute.locality": "locality"
                }
              }
            ]
          },
          {
            "id": "771916eb-3788-4dda-9bae-6bbdae51cbb7",
            "name": "web-origins",
            "description": "OpenID Connect scope for add allowed web origins to the access token",
            "protocol": "openid-connect",
            "attributes": {
              "include.in.token.scope": "false",
              "consent.screen.text": "",
              "display.on.consent.screen": "false"
            },
            "protocolMappers": [
              {
                "id": "f460d5b3-1e53-494a-9b4a-199f27502b83",
                "name": "allowed web origins",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-allowed-origins-mapper",
                "consentRequired": false,
                "config": {
                  "access.token.claim": "true",
                  "introspection.token.claim": "true"
                }
              }
            ]
          }
        ],
        "defaultDefaultClientScopes": [
          "role_list",
          "profile",
          "email",
          "roles",
          "web-origins",
          "acr",
          "basic"
        ],
        "defaultOptionalClientScopes": [
          "offline_access",
          "address",
          "phone",
          "microprofile-jwt"
        ],
        "browserSecurityHeaders": {
          "contentSecurityPolicyReportOnly": "",
          "xContentTypeOptions": "nosniff",
          "referrerPolicy": "no-referrer",
          "xRobotsTag": "none",
          "xFrameOptions": "SAMEORIGIN",
          "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
          "xXSSProtection": "1; mode=block",
          "strictTransportSecurity": "max-age=31536000; includeSubDomains"
        },
        "smtpServer": {},
        "eventsEnabled": false,
        "eventsListeners": [
          "jboss-logging"
        ],
        "enabledEventTypes": [],
        "adminEventsEnabled": false,
        "adminEventsDetailsEnabled": false,
        "identityProviders": [],
        "identityProviderMappers": [],
        "components": {
          "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
            {
              "id": "7a95bd4b-c5bf-406f-9607-c4279425669f",
              "name": "Max Clients Limit",
              "providerId": "max-clients",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "max-clients": [
                  "200"
                ]
              }
            },
            {
              "id": "787a4347-992f-46cc-a02d-bbaed3855e25",
              "name": "Full Scope Disabled",
              "providerId": "scope",
              "subType": "anonymous",
              "subComponents": {},
              "config": {}
            },
            {
              "id": "892c60ad-5968-46c1-8bc4-fbf9aaca3534",
              "name": "Allowed Protocol Mapper Types",
              "providerId": "allowed-protocol-mappers",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "allowed-protocol-mapper-types": [
                  "oidc-sha256-pairwise-sub-mapper",
                  "saml-role-list-mapper",
                  "saml-user-attribute-mapper",
                  "oidc-address-mapper",
                  "oidc-usermodel-property-mapper",
                  "saml-user-property-mapper",
                  "oidc-usermodel-attribute-mapper",
                  "oidc-full-name-mapper"
                ]
              }
            },
            {
              "id": "36caea43-73f5-4f92-a60c-4f574b2f32c6",
              "name": "Consent Required",
              "providerId": "consent-required",
              "subType": "anonymous",
              "subComponents": {},
              "config": {}
            },
            {
              "id": "56ab21d9-df25-4727-aa08-cdbcb9cb453a",
              "name": "Trusted Hosts",
              "providerId": "trusted-hosts",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "host-sending-registration-request-must-match": [
                  "true"
                ],
                "client-uris-must-match": [
                  "true"
                ]
              }
            },
            {
              "id": "a8b93a3c-db7f-4550-9b01-8e2d1c4f4afc",
              "name": "Allowed Client Scopes",
              "providerId": "allowed-client-templates",
              "subType": "authenticated",
              "subComponents": {},
              "config": {
                "allow-default-scopes": [
                  "true"
                ]
              }
            },
            {
              "id": "b398312b-764f-42d9-bfb3-e0436ee7668a",
              "name": "Allowed Client Scopes",
              "providerId": "allowed-client-templates",
              "subType": "anonymous",
              "subComponents": {},
              "config": {
                "allow-default-scopes": [
                  "true"
                ]
              }
            },
            {
              "id": "4add98c4-d27c-4e84-b835-5559b4d928c6",
              "name": "Allowed Protocol Mapper Types",
              "providerId": "allowed-protocol-mappers",
              "subType": "authenticated",
              "subComponents": {},
              "config": {
                "allowed-protocol-mapper-types": [
                  "saml-role-list-mapper",
                  "saml-user-attribute-mapper",
                  "oidc-address-mapper",
                  "oidc-usermodel-attribute-mapper",
                  "saml-user-property-mapper",
                  "oidc-sha256-pairwise-sub-mapper",
                  "oidc-full-name-mapper",
                  "oidc-usermodel-property-mapper"
                ]
              }
            }
          ],
          "org.keycloak.userprofile.UserProfileProvider": [
            {
              "id": "be12d775-c633-4673-ae64-167aed3fd64d",
              "providerId": "declarative-user-profile",
              "subComponents": {},
              "config": {
                "kc.user.profile.config": [
                  "{\"attributes\":[{\"name\":\"username\",\"displayName\":\"${username}\",\"validations\":{\"length\":{\"min\":3,\"max\":255},\"username-prohibited-characters\":{},\"up-username-not-idn-homograph\":{}},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"email\",\"displayName\":\"${email}\",\"validations\":{\"email\":{},\"length\":{\"max\":255}},\"required\":{\"roles\":[\"user\"]},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"firstName\",\"displayName\":\"${firstName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"required\":{\"roles\":[\"user\"]},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"lastName\",\"displayName\":\"${lastName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"required\":{\"roles\":[\"user\"]},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false}],\"groups\":[{\"name\":\"user-metadata\",\"displayHeader\":\"User metadata\",\"displayDescription\":\"Attributes, which refer to user metadata\"}]}"
                ]
              }
            }
          ],
          "org.keycloak.keys.KeyProvider": [
            {
              "id": "db21f7bb-c541-42e7-b24b-b6b50b9107e2",
              "name": "hmac-generated-hs512",
              "providerId": "hmac-generated",
              "subComponents": {},
              "config": {
                "priority": [
                  "100"
                ],
                "algorithm": [
                  "HS512"
                ]
              }
            },
            {
              "id": "5952ac4f-6605-468f-9dd9-f9d89fed9913",
              "name": "aes-generated",
              "providerId": "aes-generated",
              "subComponents": {},
              "config": {
                "priority": [
                  "100"
                ]
              }
            },
            {
              "id": "416fc487-e439-48d2-b11e-1b7717f7d886",
              "name": "rsa-generated",
              "providerId": "rsa-generated",
              "subComponents": {},
              "config": {
                "priority": [
                  "100"
                ]
              }
            },
            {
              "id": "9a5da26c-8d30-4a2a-8869-593991371d5b",
              "name": "rsa-enc-generated",
              "providerId": "rsa-enc-generated",
              "subComponents": {},
              "config": {
                "priority": [
                  "100"
                ],
                "algorithm": [
                  "RSA-OAEP"
                ]
              }
            }
          ]
        },
        "internationalizationEnabled": false,
        "supportedLocales": [],
        "authenticationFlows": [
          {
            "id": "5459b683-66f3-4055-bc73-49cc42029f69",
            "alias": "Account verification options",
            "description": "Method with which to verity the existing account",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "idp-email-verification",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "ALTERNATIVE",
                "priority": 20,
                "autheticatorFlow": true,
                "flowAlias": "Verify Existing Account by Re-authentication",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "afe911fb-b6bc-48b9-a8fa-ffaab33effa8",
            "alias": "Browser - Conditional OTP",
            "description": "Flow to determine if the OTP is required for the authentication",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "auth-otp-form",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "a5df729c-71bc-40d1-a9b6-f517a2e665f5",
            "alias": "Direct Grant - Conditional OTP",
            "description": "Flow to determine if the OTP is required for the authentication",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "direct-grant-validate-otp",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "edeef0cf-57e7-41f0-ab40-c0858e30dd29",
            "alias": "First broker login - Conditional OTP",
            "description": "Flow to determine if the OTP is required for the authentication",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "auth-otp-form",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "bec90a9f-b7f0-49d5-a82c-75bb87bbc510",
            "alias": "Handle Existing Account",
            "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "idp-confirm-link",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": true,
                "flowAlias": "Account verification options",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "7cc6f0db-9b84-4d99-b7e3-7e7317d32d6d",
            "alias": "Reset - Conditional OTP",
            "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "conditional-user-configured",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "reset-otp",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "8213e709-08b9-4793-94fc-cc75458c6dce",
            "alias": "User creation or linking",
            "description": "Flow for the existing/non-existing user alternatives",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticatorConfig": "create unique user config",
                "authenticator": "idp-create-user-if-unique",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "ALTERNATIVE",
                "priority": 20,
                "autheticatorFlow": true,
                "flowAlias": "Handle Existing Account",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "2beb9b16-a54e-443f-9f44-a852f37a0027",
            "alias": "Verify Existing Account by Re-authentication",
            "description": "Reauthentication of existing account",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "idp-username-password-form",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "CONDITIONAL",
                "priority": 20,
                "autheticatorFlow": true,
                "flowAlias": "First broker login - Conditional OTP",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "6ec22683-4f4a-48a8-8e09-17e3a9f55842",
            "alias": "browser",
            "description": "browser based authentication",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "auth-cookie",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "auth-spnego",
                "authenticatorFlow": false,
                "requirement": "DISABLED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "identity-provider-redirector",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 25,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "ALTERNATIVE",
                "priority": 30,
                "autheticatorFlow": true,
                "flowAlias": "forms",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "844d9425-f1d3-4a8e-b72c-47963c75124f",
            "alias": "clients",
            "description": "Base authentication for clients",
            "providerId": "client-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "client-secret",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "client-jwt",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "client-secret-jwt",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 30,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "client-x509",
                "authenticatorFlow": false,
                "requirement": "ALTERNATIVE",
                "priority": 40,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "a61a5d20-1b2d-48b6-8477-71a6f48a601e",
            "alias": "direct grant",
            "description": "OpenID Connect Resource Owner Grant",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "direct-grant-validate-username",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "direct-grant-validate-password",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "CONDITIONAL",
                "priority": 30,
                "autheticatorFlow": true,
                "flowAlias": "Direct Grant - Conditional OTP",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "bcbbd5f7-1938-4e77-8447-24a587e3ac5d",
            "alias": "docker auth",
            "description": "Used by Docker clients to authenticate against the IDP",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "docker-http-basic-authenticator",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "c6f063ec-fdfc-4142-b8a3-9cc278720dac",
            "alias": "first broker login",
            "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticatorConfig": "review profile config",
                "authenticator": "idp-review-profile",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": true,
                "flowAlias": "User creation or linking",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "c8d03032-6d48-4445-9be7-1aac0dc28846",
            "alias": "forms",
            "description": "Username, password, otp and other auth forms.",
            "providerId": "basic-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "auth-username-password-form",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "CONDITIONAL",
                "priority": 20,
                "autheticatorFlow": true,
                "flowAlias": "Browser - Conditional OTP",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "ead0c7b5-29e4-48f6-95f5-50b58ebc3460",
            "alias": "registration",
            "description": "registration flow",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "registration-page-form",
                "authenticatorFlow": true,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": true,
                "flowAlias": "registration form",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "fa9fc565-1695-480b-a5c3-489b6bd68ba1",
            "alias": "registration form",
            "description": "registration form",
            "providerId": "form-flow",
            "topLevel": false,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "registration-user-creation",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "registration-password-action",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 50,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "registration-recaptcha-action",
                "authenticatorFlow": false,
                "requirement": "DISABLED",
                "priority": 60,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "registration-terms-and-conditions",
                "authenticatorFlow": false,
                "requirement": "DISABLED",
                "priority": 70,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "df921532-f2e3-49fc-84b7-45f780f520f1",
            "alias": "reset credentials",
            "description": "Reset credentials for a user if they forgot their password or something",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "reset-credentials-choose-user",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "reset-credential-email",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 20,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticator": "reset-password",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 30,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              },
              {
                "authenticatorFlow": true,
                "requirement": "CONDITIONAL",
                "priority": 40,
                "autheticatorFlow": true,
                "flowAlias": "Reset - Conditional OTP",
                "userSetupAllowed": false
              }
            ]
          },
          {
            "id": "15bb8cf9-eb7c-4bd6-82fd-5055166bebc3",
            "alias": "saml ecp",
            "description": "SAML ECP Profile Authentication Flow",
            "providerId": "basic-flow",
            "topLevel": true,
            "builtIn": true,
            "authenticationExecutions": [
              {
                "authenticator": "http-basic-authenticator",
                "authenticatorFlow": false,
                "requirement": "REQUIRED",
                "priority": 10,
                "autheticatorFlow": false,
                "userSetupAllowed": false
              }
            ]
          }
        ],
        "authenticatorConfig": [
          {
            "id": "42434d2c-ef5a-4a95-8c77-610f7d839fd9",
            "alias": "create unique user config",
            "config": {
              "require.password.update.after.registration": "false"
            }
          },
          {
            "id": "4a7f8c13-45f8-45c8-ba5d-bdf15121783f",
            "alias": "review profile config",
            "config": {
              "update.profile.on.first.login": "missing"
            }
          }
        ],
        "requiredActions": [
          {
            "alias": "CONFIGURE_TOTP",
            "name": "Configure OTP",
            "providerId": "CONFIGURE_TOTP",
            "enabled": true,
            "defaultAction": false,
            "priority": 10,
            "config": {}
          },
          {
            "alias": "TERMS_AND_CONDITIONS",
            "name": "Terms and Conditions",
            "providerId": "TERMS_AND_CONDITIONS",
            "enabled": false,
            "defaultAction": false,
            "priority": 20,
            "config": {}
          },
          {
            "alias": "UPDATE_PASSWORD",
            "name": "Update Password",
            "providerId": "UPDATE_PASSWORD",
            "enabled": true,
            "defaultAction": false,
            "priority": 30,
            "config": {}
          },
          {
            "alias": "UPDATE_PROFILE",
            "name": "Update Profile",
            "providerId": "UPDATE_PROFILE",
            "enabled": true,
            "defaultAction": false,
            "priority": 40,
            "config": {}
          },
          {
            "alias": "VERIFY_EMAIL",
            "name": "Verify Email",
            "providerId": "VERIFY_EMAIL",
            "enabled": true,
            "defaultAction": false,
            "priority": 50,
            "config": {}
          },
          {
            "alias": "delete_account",
            "name": "Delete Account",
            "providerId": "delete_account",
            "enabled": false,
            "defaultAction": false,
            "priority": 60,
            "config": {}
          },
          {
            "alias": "webauthn-register",
            "name": "Webauthn Register",
            "providerId": "webauthn-register",
            "enabled": true,
            "defaultAction": false,
            "priority": 70,
            "config": {}
          },
          {
            "alias": "webauthn-register-passwordless",
            "name": "Webauthn Register Passwordless",
            "providerId": "webauthn-register-passwordless",
            "enabled": true,
            "defaultAction": false,
            "priority": 80,
            "config": {}
          },
          {
            "alias": "VERIFY_PROFILE",
            "name": "Verify Profile",
            "providerId": "VERIFY_PROFILE",
            "enabled": true,
            "defaultAction": false,
            "priority": 90,
            "config": {}
          },
          {
            "alias": "delete_credential",
            "name": "Delete Credential",
            "providerId": "delete_credential",
            "enabled": true,
            "defaultAction": false,
            "priority": 100,
            "config": {}
          },
          {
            "alias": "update_user_locale",
            "name": "Update User Locale",
            "providerId": "update_user_locale",
            "enabled": true,
            "defaultAction": false,
            "priority": 1000,
            "config": {}
          }
        ],
        "browserFlow": "browser",
        "registrationFlow": "registration",
        "directGrantFlow": "direct grant",
        "resetCredentialsFlow": "reset credentials",
        "clientAuthenticationFlow": "clients",
        "dockerAuthenticationFlow": "docker auth",
        "firstBrokerLoginFlow": "first broker login",
        "attributes": {
          "cibaBackchannelTokenDeliveryMode": "poll",
          "cibaAuthRequestedUserHint": "login_hint",
          "clientOfflineSessionMaxLifespan": "0",
          "oauth2DevicePollingInterval": "5",
          "clientSessionIdleTimeout": "0",
          "clientOfflineSessionIdleTimeout": "0",
          "cibaInterval": "5",
          "realmReusableOtpCode": "false",
          "cibaExpiresIn": "120",
          "oauth2DeviceCodeLifespan": "600",
          "parRequestUriLifespan": "60",
          "clientSessionMaxLifespan": "0",
          "frontendUrl": "",
          "organizationsEnabled": "false",
          "acr.loa.map": "{}"
        },
        "keycloakVersion": "26.0.5",
        "userManagedAccessAllowed": false,
        "organizationsEnabled": false,
        "clientProfiles": {
          "profiles": []
        },
        "clientPolicies": {
          "policies": []
        }
      }

  ## @param keycloakConfigCli.existingConfigmap ConfigMap with keycloak-config-cli configuration
  ## NOTE: This will override keycloakConfigCli.configuration
  ##
  existingConfigmap: ""
  ## Automatic Cleanup for Finished Jobs
  ## @param keycloakConfigCli.cleanupAfterFinished.enabled Enables Cleanup for Finished Jobs
  ## @param keycloakConfigCli.cleanupAfterFinished.seconds Sets the value of ttlSecondsAfterFinished
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/
  ##
  cleanupAfterFinished:
    enabled: false
    seconds: 600
## @section Database parameters

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
## @param postgresql.auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
## @param postgresql.auth.username Name for a custom user to create
## @param postgresql.auth.password Password for the custom user to create
## @param postgresql.auth.database Name for a custom database to create
## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
## @param postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
##
postgresql:
  enabled: false
  auth:
    postgresPassword: ""
    username:
    password: ""
    database:
    existingSecret: ""
    secretKeys:
      userPasswordKey:
  architecture: standalone
## External PostgreSQL configuration
## All of these values are only used when postgresql.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for Keycloak
## @param externalDatabase.password Password for the non-root username for Keycloak
## @param externalDatabase.database Keycloak database name
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretHostKey Name of an existing secret key containing the database host name
## @param externalDatabase.existingSecretPortKey Name of an existing secret key containing the database port
## @param externalDatabase.existingSecretUserKey Name of an existing secret key containing the database user
## @param externalDatabase.existingSecretDatabaseKey Name of an existing secret key containing the database name
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
## @param externalDatabase.annotations Additional custom annotations for external database secret object
##
externalDatabase:
  host: ""
  port: 5432
  user: postgres
  database: keycloak
  password: "postgres"
  existingSecret: ""
  existingSecretHostKey: ""
  existingSecretPortKey: ""
  existingSecretUserKey: ""
  existingSecretDatabaseKey: ""
  existingSecretPasswordKey: ""
  annotations: {}
## @section Keycloak Cache parameters

## Keycloak cache configuration
## ref: https://www.keycloak.org/server/caching
## @param cache.enabled Switch to enable or disable the keycloak distributed cache for kubernetes.
## NOTE: Set to false to use 'local' cache (only supported when replicaCount=1).
## @param cache.stackName Set infinispan cache stack to use
## @param cache.stackFile Set infinispan cache stack filename to use
##
cache:
  enabled: true
  stackName: kubernetes
  stackFile: ""
## @section Keycloak Logging parameters

## Keycloak logging configuration
## ref: https://www.keycloak.org/server/logging
## @param logging.output Alternates between the default log output format or json format
## @param logging.level Allowed values as documented: FATAL, ERROR, WARN, INFO, DEBUG, TRACE, ALL, OFF
##
logging:
  output: default
  level: INFO
