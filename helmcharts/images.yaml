global:
  image:
    registry: &global_registry "sanketikahub"
    dockerRegistrySecretName: &dockerSecretName "registry-secret-name"
     #Replace the dockerConfigJson below for the private images
    dockerConfigJson: |-
      {"auths":{"http://registry.your-domain.io":{"auth":"eW91cl9yZWdpc3RyeV91c2VybmFtZTp5b3VyX3JlZ2lzdHJ5X3Rva2Vu"}}}

imagePullSecrets: &imagePullSecrets
  - name: *dockerSecretName

# service:
#   image: "service name"
#   registry: "" # takes precedence over global registry
#   digest: "" # takes precedence over tag if specified
#   tag: "1.0.0-GA"

images: &images
  ## Obsrv Images
  command-api: &command-api # registry: ""
    repository: obsrv-command-service
    tag: "1.8.0"
    digest: ""

  # dataset-api: #open source
  #   # registry: ""
  #   repository: obsrv-api-service
  #   tag: "1.0.5-GA"
  #   digest: ""

  dataset-api: &dataset-api # registry: ""
    repository: obsrv-api-service
    tag: "1.9.0"
    digest: ""

  config-api: &config-api # registry: ""
    repository: config-service-ext
    tag: "1.2.0-RC"
    digest: ""

  web-console: &web-console # registry: ""
    repository: "obsrv-web-console"
    tag: "1.4.1"
    digest: ""

  ## PIPELINE ENTERPRISE
  unified-pipeline: &unified-pipeline
    registry: *global_registry
    repository: unified-pipeline
    tag: "1.7.1"
    digest: ""

  cache-indexer: &cache-indexer
    registry: *global_registry
    repository: cache-indexer
    tag: "1.7.1"
    digest: ""

  ## PIPELINE ENTERPRISE - INDIVIDUAL COMPONENTS
  ## TODO: Add every component here
  transformer-ext: &transforer-ext # registry: ""
    repository: transformer-ext
    tag: "1.4.0"
    digest: ""

  master-data-processor: &master-data-processor # registry: ""
    repository: master-data-processor
    tag: "1.4.0"
    digest: ""

  postgresql-backup: &postgresql-backup # registry: ""
    repository: postgresql-backup
    tag: "17.2-r0"
    digest: ""

  postgresql: &postgresql
    registry: "docker.io"
    repository: "bitnami/postgresql"
    tag: "17.2.0"
    digest: ""

  postgresql-exporter: &postgresql-exporter
    registry: "docker.io"
    repository: "sanketikahub/postgres-exporter"
    tag: "v0.16.0"
    digest: ""

  postgresql-migration: &postgresql-migration
    registry: "docker.io"
    repository: "flyway/flyway"
    # tag: "10.1"
    tag: "10.12.0" # updated tag - yet to be tested
    digest: ""

  volume-autoscaler: &volume-autoscaler
    registry: "docker.io"
    repository: devopsnirvana/kubernetes-volume-autoscaler
    tag: 1.0.5
    digest: ""

  s3-exporter: &s3-exporter
    registry: "docker.io"
    repository: "ribbybibby/s3-exporter"
    tag: "latest"
    digest: ""

  promtail: &promtail
    registry: "docker.io"
    repository: "grafana/promtail"
    tag: "3.2.2"
    digest: ""

  valkey: &valkey
    registry: "docker.io"
    repository: "bitnami/valkey"
    tag: "8.0.1-debian-12-r3"
    digest: ""
    pullSecrets:
      - *dockerSecretName


  # submit-ingestion: &submit-ingestion
  #   registry: *global_registry
  #   repository: "ubuntu"
  #   tag: "20.04"
  #   digest: ""

  system-rules-ingestor: &system-rules-ingestor # registry: ""
    repository: "system-rules-ingestor"
    tag: "1.7.0"
    digest: ""

  loki: &loki
    registry: "docker.io"
    repository: "grafana/loki"
    tag: "3.3.2"
    digest: ""

  loki-gateway: &loki-gateway
    registry: "docker.io"
    repository: "nginxinc/nginx-unprivileged"
    tag: "1.27-alpine"
    digest: ""

  kubernetes-reflector: &kubernetes-reflector
    registry: "docker.io"
    repository: "emberstack/kubernetes-reflector"
    tag: "7.1.262"
    digest: ""

  alertmanager: &alertmanager
    registry: *global_registry
    repository: alertmanager
    tag: v0.28.0-rc.0
    digest: ""

  prometheus-operator-webhook: &prometheus-operator-webhook
    registry: *global_registry
    repository: kube-webhook-certgen
    tag: v20221220-controller-v1.5.1-58-g787ea74b6
    digest: ""

  prometheus-operator: &prometheus-operator
    registry: *global_registry
    repository: prometheus-operator
    tag: "v0.78.2"
    digest: ""

  prometheus-config-reloader: &prometheus-config-reloader
    registry: *global_registry
    repository: prometheus-config-reloader
    # if not set appVersion field from Chart.yaml is used
    tag: "v0.79.0"
    digest: ""

  prometheus: &prometheus
    registry: *global_registry
    repository: prometheus
    tag: v2.44.0
    digest: ""

  prometheus-pushgateway: &prometheus-pushgateway
    repository: sanketikahub/pushgateway
    tag: v1.10.0
    digest: ""

  grafana: &grafana
    registry: docker.io
    repository: grafana/grafana
    tag: "11.4.0"
    digest: ""

  grafana-test-framework: &grafana-test-framework
    registry: "docker.io"
    repository: bats/bats
    tag: "1.11.1"
    digest: ""

  grafana-download-dashboards: &grafana-download-dashboards
    registry: docker.io
    repository: bats/bats
    tag: "v1.4.1"
    digest: ""

  grafana-init-chown-data: &grafana-init-chown-data
    registry: docker.io
    repository: library/busybox
    tag: "1.31.1"
    digest: ""

  grafana-side-car: &grafana-side-car
    registry: *global_registry
    repository: k8s-sidecar
    tag: 1.27.4
    digest: ""

  kube-state-metrics: &kube-state-metrics
    registry: *global_registry
    repository: "kube-state-metrics"
    tag: "v2.13.0"
    digest: ""

  prometheus-node-exporter: &prometheus-node-exporter
    registry: *global_registry
    repository: "node-exporter"
    tag: "v1.8.2"
    digest: ""

  velero: &velero
    registry: "docker.io"
    repository: "velero/velero"
    tag: "v1.15.0"
  #  digest: "" If uncommented, this will take precendence as per velero chart design

  superset: &superset
    registry: *global_registry
    repository: "superset"
    tag: "4.1.1"
    digest: ""

  secor: &secor
    # registry: *global_registry
    repository: "secor"
    tag: "0.29.1"
    digest: ""

  spark: &spark # registry: ""
    repository: "sanketikahub/spark"
    tag: "3.5.1-debian-12-r6"
    digest: ""

  cert_manager_cainjector: &cert_manager_cainjector
    repository: sanketikahub/cert-manager-cainjector
    tag: v1.12.2
    digest: ""

  cert_manager_webhook: &cert_manager_webhook # registry: ""
    repository: sanketikahub/cert-manager-webhook
    tag: v1.12.2
    digest: ""

  cert_manager_controller: &cert_manager_controller
    repository: sanketikahub/cert-manager-controller
    tag: v1.12.2
    digest: ""

  cert_manager_ctl: &cert_manager_ctl
    repository: sanketikahub/cert-manager-ctl
    tag: v1.12.2
    digest: ""

  cert_manager_acmesolver: &cert_manager_acmesolver
    repository: sanketikahub/cert-manager-acmesolver
    tag: v1.12.2
    digest: ""

  kong: &kong # registry: ""
    repository: kong
    tag: 3.3
    digest: ""

  kafka: &kafka
    registry: ""
    repository: bitnami/kafka
    tag: 3.6.0
    digest: ""

  kafka40: &kafka40
    registry: ""
    repository: bitnami/kafka
    tag: 4.0.0-debian-12-r7
    digest: ""

  jmx: &jmx
    registry: *global_registry
    repository: jmx-exporter
    tag: 0.17.2-debian-11-r29
    digest: ""

  minio: &minio
    registry: docker.io
    repository: bitnami/minio
    tag: 2024.11.7-debian-12-r0
    digest: ""

  # kafka-connector: &kafka-connector
  #   # registry: ""
  #   # repository: kafka-connector
  #   tag: 1.0.5-GA
  #   digest: ""

  kafka-exporter: &kafka-exporter
    registry: *global_registry
    repository: kafka-exporter
    tag: 1.0.1
    digest: ""

  kafka-message-exporter: &kafka-message-exporter # registry: ""
    repository: kafka-message-exporter
    tag: 1.2.0-RC
    digest: ""

  druid_operator: &druid_operator
    registry: "docker.io/druidio"
    repository: druidio/druid-operator
    tag: "0.0.9"
    digest: ""

  druid-raw-cluster: &druid-raw-cluster
    registry: *global_registry
    repository: druid
    tag: "28.0.1"
    digest: ""

  druid_exporter: &druid_exporter
    # registry: "docker.io"
    name: sanketikahub/druid-exporter
    tag: "v0.11"
    digest: ""

  keycloak: &keycloak
    registry: docker.io
    repository:  bitnami/keycloak
    tag: "26.0.5-debian-12-r2"
    digest: ""

  keycloakConfigCli: &keycloakConfigCli
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 6.2.0-debian-12-r0

  hms: &hms
    # registry: ""
    repository: hms
    tag: "1.0.5"
    digest: ""

  trino: &trino
    registry: "registry-1.docker.io"
    repository: trinodb/trino
    tag: "432"
    digest: ""

  promitor-agent-scraper: &promitor-agent-scraper
    repository: containers.promitor.io/tomkerkhove/promitor-agent-scraper
    pullPolicy: IfNotPresent
    pullSecrets: []

  lakehouse-connector: &lakehouse-connector
    repository: lakehouse-connector
    tag: 1.4.0


  opentelemetry-collector: &opentelemetry-collector
    repository: otel/opentelemetry-collector-contrib
    tag: "latest"
    digest: ""

  kubernetes-ingress-controller: &kubernetes-ingress-controller
    repository: "kong/kubernetes-ingress-controller"
    tag: "2.10"
    digest: ""

  kubectl: &kubectl
    repository: "docker.io/bitnami/kubectl"
    tag: "1.26.14-debian-11-r6"

  sanketikahub-kubectl: &sanketikahub-kubectl
    registry: *global_registry
    repository: kubectl
    tag: "1.32.0-r1"
    digest: ""

# Public charts like bitnami etc
# Modyfying these charts involves many changes
# Hence we are keeping their original desgin
# It enables easy upgrade in future

internal: &internal
  command-api:
    <<: *command-api
    imagePullSecrets: 
    - name: *dockerSecretName

  web-console:
    <<: *web-console
    imagePullSecrets: 
    - name: *dockerSecretName
    kubectl:
      image:
        <<: *sanketikahub-kubectl

  dataset-api:
    <<: *dataset-api
    imagePullSecrets: 
    - name: *dockerSecretName
    kubectl:
      image:
        <<: *sanketikahub-kubectl

  config-api:
    <<: *config-api
    imagePullSecrets: 
    - name: *dockerSecretName
    kubectl:
      image:
        <<: *sanketikahub-kubectl

  postgresql:
    image:
      <<: *postgresql
      pullSecrets:
      - *dockerSecretName

  hms:
    image:
      <<: *hms
      imagePullSecrets: 
      - name: *dockerSecretName

  trino:
    image:
      <<: *trino
      imagePullSecrets: 
      - name: *dockerSecretName

  postgresql-backup:
    <<: *postgresql-backup
    imagePullSecrets: 
    - name: *dockerSecretName

  postgresql-exporter:
    <<: *postgresql-exporter
    imagePullSecrets: 
    - name: *dockerSecretName

  postgresql-migration:
    <<: *postgresql-migration
    imagePullSecrets: 
    - name: *dockerSecretName

  s3-exporter:
    <<: *s3-exporter
    imagePullSecrets: 
    - name: *dockerSecretName

  velero:
    image:
      <<: *velero
      imagePullSecrets: 
      - *dockerSecretName
    kubectl:
      image:
        <<: *kubectl

  valkey-dedup:
    image:
      <<: *valkey
      pullSecrets:
      - *dockerSecretName

  valkey-denorm:
    image:
      <<: *valkey
      pullSecrets:
      - *dockerSecretName

  loki:
    imagePullSecrets: 
    - name: *dockerSecretName
    singleBinary:
      image:
        <<: *loki
    gateway:
      image:
        <<: *loki-gateway

  kubernetes-reflector:
    imagePullSecrets: 
    - name: *dockerSecretName
    image:
      <<: *kubernetes-reflector


  kube-prometheus-stack:
    prometheus:
      imagePullSecrets:
        - name: *dockerSecretName
      prometheusSpec:
        image:
          <<: *prometheus
    alertmanager:
      imagePullSecrets:
        - name: *dockerSecretName
      alertmanagerSpec:
        image:
          <<: *alertmanager
    prometheusOperator:
      imagePullSecrets:
        - name: *dockerSecretName
      admissionWebhooks:
        patch:
          image:
            <<: *prometheus-operator-webhook
 
      image:
        <<: *prometheus-operator
 
      prometheusConfigReloader:
        image:
          <<: *prometheus-config-reloader
    grafana:
      image:
        <<: *grafana
        pullSecrets:
        - *dockerSecretName
      testFramework:
        <<: *grafana-test-framework
      downloadDashboardsImage:
        <<: *grafana-download-dashboards
      initChownData:
        image:
          <<: *grafana-init-chown-data
      sidecar:
        image:
          <<: *grafana-side-car
    kube-state-metrics:
      imagePullSecrets:
      - name: *dockerSecretName
      image:
        <<: *kube-state-metrics
    prometheus-node-exporter:
      imagePullSecrets:
      - name: *dockerSecretName
      image:
        <<: *prometheus-node-exporter

  prometheus-pushgateway:
    imagePullSecrets: 
    - name: *dockerSecretName
    image:
      <<: *prometheus-pushgateway
      imagePullSecrets: 
      - name: *dockerSecretName

  keycloak:
    image:
      <<: *keycloak
      pullSecrets:
      - *dockerSecretName
    kubectl:
      image:
        <<: *sanketikahub-kubectl

    keycloakConfigCli:
      image:
        <<: *keycloakConfigCli
        pullSecrets:
        - *dockerSecretName

  druid-exporter:
    image:
      <<: *druid_exporter
      pullSecrets:
      - *dockerSecretName

  druid-raw-cluster:
    <<: *druid-raw-cluster
    imagePullSecrets: 
    - name: *dockerSecretName

  druid-operator:
    imagePullSecrets: 
    - name: *dockerSecretName
    image:
      <<: *druid_operator

  kafka-message-exporter:
    <<: *kafka-message-exporter
    imagePullSecrets: 
    - name: *dockerSecretName

  # kafka-exporter:
  #   image:
  #     <<: *kafka-exporter



  # kafka-connector:
  #   image:
  #     <<: *kafka-connector

  kafka:
    image:
      <<: *kafka
    metrics: # The kafka exporter is being deployed from the kafka chart
      kafka:
        image:
          <<: *kafka-exporter

  kafka40:
    image:
      <<: *kafka40
      pullSecrets:
      - *dockerSecretName
    metrics:
      kafka:
        image:
          <<: *kafka-exporter

  kong:
    image:
      <<: *kong
      pullSecrets:
      - *dockerSecretName
    ingressController:
      image:
        <<: *kubernetes-ingress-controller
        pullSecrets:
        - *dockerSecretName

  cert-manager:
    imagePullSecrets: 
    - name: *dockerSecretName
    image:
      <<: *cert_manager_controller
    startupapicheck:
      image:
        <<: *cert_manager_ctl
    webhook:
      image:
        <<: *cert_manager_webhook
    cainjector:
      image:
        <<: *cert_manager_cainjector
    acmesolver:
      image:
        <<: *cert_manager_acmesolver

  spark:
    image:
      <<: *spark
      pullSecrets:
      - *dockerSecretName

  secor:
    <<: *secor
    imagePullSecrets: 
    - name: *dockerSecretName

  superset:
    <<: *superset
    imagePullSecrets: 
      - name: *dockerSecretName

  flink:
    flink_jobs:
      master-data-processor:
        enabled: false
        <<: *master-data-processor
        imagePullSecrets: 
        - name: *dockerSecretName
      unified-pipeline:
        enabled: true
        <<: *unified-pipeline
        imagePullSecrets: 
        - name: *dockerSecretName
      cache-indexer:
        enabled: true
        <<: *cache-indexer
        imagePullSecrets: 
        - name: *dockerSecretName

  system-rules-ingestor:
    <<: *system-rules-ingestor
    imagePullSecrets: 
    - name: *dockerSecretName

  volume-autoscaler:
    <<: *volume-autoscaler
    imagePullSecrets: 
    - name: *dockerSecretName

  promitor-agent-scraper:
    image:
      <<: *promitor-agent-scraper
      pullSecrets:
      - *dockerSecretName

  lakehouse-connector:
    image:
      <<: *lakehouse-connector
      imagePullSecrets: 
      - *dockerSecretName

  minio:
    image:
      <<: *minio
      pullSecrets:
      - *dockerSecretName
      
  opentelemetry-collector:
    image:
    <<: *opentelemetry-collector

  opentelemetry-collector:
    <<: *opentelemetry-collector
    imagePullSecrets: 
    - name: *dockerSecretName

  promtail:
    <<: *promtail
    imagePullSecrets: 
    - name: *dockerSecretName

  submit-ingestion:
    <<: *sanketikahub-kubectl
    imagePullSecrets: 
    - name: *dockerSecretName

  prometheus:
    <<: *prometheus
    imagePullSecrets: 
    - name: *dockerSecretName

  alertmanager:
    <<: *alertmanager
    imagePullSecrets: 
    - name: *dockerSecretName  

  prometheus-operator:
    <<: *prometheus-operator
    imagePullSecrets: 
    - name: *dockerSecretName

  
## Sourcing internal as root element,
## should need arise
<<: *internal