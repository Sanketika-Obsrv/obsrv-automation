namespace: "flink"
imagepullsecrets: ""
image:
  registry: sanketikahub
  repository: lakehouse-connector
  tag: 1.0.3
serviceMonitor:
  enabled: false
replicaCount: 1

jobmanager:
  rpc_port: 6123
  blob_port: 6124
  query_port: 6125
  ui_port: 8081
  prom_port: 9250
  heap_memory: 1024
  cpu_requests: 0.25
  cpu_limits: 0.25
  memory_requests: 1024Mi
  memory_limits: 1024Mi

rest_port: 80
resttcp_port: 8081
service:
  type: NodePort

taskmanager:
  prom_port: 9251
  rpc_port: 6122
  heap_memory: 1024
  replicas: 1
  cpu_requests: 1
  cpu_limits: 1
  memory_requests: 2048Mi
  memory_limits: 2048Mi

checkpoint_store_type: "s3"

# AWS S3 Details
s3_access_key: ""
s3_secret_key: ""
s3_endpoint: ""

# Azure Container Details
azure_account: ""
azure_secret: ""

# Google Cloud Storage Service Account JSON Path
google_service_account_key_path: ""

dataset_registry: |
  postgres {
    host = postgresql-hl.postgresql.svc.cluster.local
    port = 5432
    maxConnections = 2
    user = "flink"
    password = "flink"
    database = "flink"
  }

log4j_console_properties: |
  # This affects logging for both user code and Flink
  rootLogger.level = INFO
  rootLogger.appenderRef.console.ref = ConsoleAppender
  rootLogger.appenderRef.rolling.ref = RollingFileAppender

  # Uncomment this if you want to _only_ change Flink's logging
  logger.flink.name = org.apache.flink
  logger.flink.level = INFO

  # The following lines keep the log level of common libraries/connectors on
  # log level INFO. The root logger does not override this. You have to manually
  # change the log levels here.
  logger.akka.name = akka
  logger.akka.level = ERROR
  logger.kafka.name= org.apache.kafka
  logger.kafka.level = ERROR
  logger.hadoop.name = org.apache.hadoop
  logger.hadoop.level = ERROR
  logger.zookeeper.name = org.apache.zookeeper
  logger.zookeeper.level = ERROR

  # Log all infos to the console
  appender.console.name = ConsoleAppender
  appender.console.type = CONSOLE
  appender.console.layout.type = PatternLayout
  appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n

  # Log all infos in the given rolling file
  appender.rolling.name = RollingFileAppender
  appender.rolling.type = RollingFile
  appender.rolling.append = false
  appender.rolling.fileName = ${sys:log.file}
  appender.rolling.filePattern = ${sys:log.file}.%i
  appender.rolling.layout.type = PatternLayout
  appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n
  appender.rolling.policies.type = Policies
  appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
  appender.rolling.policies.size.size=10MB
  appender.rolling.strategy.type = DefaultRolloverStrategy
  appender.rolling.strategy.max = 5

  # Suppress the irrelevant (wrong) warnings from the Netty channel handler
  logger.netty.name = org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline
  logger.netty.level = OFF

base_config: |
  job {
    env = "dev"
    enable.distributed.checkpointing = true
    statebackend {
      base.url = "wasbs://obsrv-dev-checkpointing@obsrvdevsa.blob.core.windows.net/flink-checkpoints"
    }
  }
  kafka {
    broker-servers = "kafka-headless.kafka.svc.cluster.local:9092"
    producer.broker-servers = "kafka-headless.kafka.svc.cluster.local:9092"
    consumer.broker-servers = "kafka-headless.kafka.svc.cluster.local:9092"
    zookeeper = "kafka-headless.kafka.svc.cluster.local:2181"
    producer {
      max-request-size = 10000024
      batch.size = 98304
      linger.ms = 10
      compression = "snappy"
    }
    output.system.event.topic = ${job.env}".system.events"
    output.failed.topic = ${job.env}".failed"
  }

  redis.connection.timeout = 100
  redis {
    host = redis-dedup-master.redis.svc.cluster.local
    port = 6379
  }

  redis-meta {
    host = redis-denorm-master.redis.svc.cluster.local
    port = 6379
  }

  task {
    parallelism = 1
    consumer.parallelism = 1
    checkpointing.interval = 30000
    checkpointing.pause.between.seconds = 5000
    restart-strategy.attempts = 3
    restart-strategy.delay = 30000 # in milli-seconds
  }

  postgres {
    host = postgresql-hl.postgresql.svc.cluster.local
    port = 5432
    maxConnections = 2
    user = "postgres"
    password = "postgres"
    database = "obsrv"
  }

  lms-cassandra {
    host = "localhost"
    port = "9042"
  }


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

enable_lakehouse: false

hadoop_core_site: {}

lakehouse-connector:
  lakehouse-connector: |+
    include file("/data/flink/conf/baseconfig.conf")
    kafka {
      input.topic = ${job.env}".hudi.connector.in"
      output.topic = ${job.env}".hudi.connector.out"
      output.invalid.topic = ${job.env}".failed"
      event.max.size = "1048576" # Max is only 1MB
      groupId = ${job.env}"-hudi-writer-group"
      producer {
        max-request-size = 5242880
      }
    }

    task {
      checkpointing.compressed = true
      checkpointing.interval = 120000
      checkpointing.pause.between.seconds = 120000
      restart-strategy.attempts = 3
      restart-strategy.delay = 30000 # in milli-seconds
      parallelism = 1
      consumer.parallelism = 1
      downstream.operators.parallelism = 1
    }

    hudi {
      hms {
        enabled = true
        uri = "thrift://hudi-hms.hms.svc:9083"
        database {
          name = "hms"
          username = "hms"
          password = "hms123"
        }
      }
      table {
        type = "MERGE_ON_READ"
        base.path = "wasbs://hudi-table@obsrvdevsa.blob.core.windows.net"
      }
      write {
        tasks = 2
        task.max.memory = 256
        compaction.max.memory = 100
      }
      metadata.enabled = true
      compaction.enabled = true
      write.tasks = 2
      write.batch.size = 16
      compaction.tasks = 2
      index.type = "BLOOM"
      delta.commits = 2
      delta.seconds = 10
      write.batch.size = 256
      compaction.tasks = 2
      index.type = "BLOOM"
      delta.commits = 2
      delta.seconds = 600
      compression.codec = "snappy"
      fs.atomic_creation.support = "wasbs"
    }
  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    jobManager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    state.savepoints.dir: file:///tmp
    jobmanager.rpc.address: lakehouse-connector-jobmanager
    blob.server.port: 6124
    jobmanager.rpc.port: 6123
    taskmanager.rpc.port: 6122
  job_classname: org.sunbird.obsrv.streaming.HudiConnectorStreamTask

nameOverride: "lakehouse-connector"