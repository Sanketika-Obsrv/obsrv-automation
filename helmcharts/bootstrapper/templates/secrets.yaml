apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
  name: obsrv-bootstrap-secrets-job-sa
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
  name: obsrv-bootstrap-secrets-job-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "delete", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
  name: obsrv-bootstrap-secrets-job-rolebinding
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: obsrv-bootstrap-secrets-job-role
subjects:
  - kind: ServiceAccount
    name: obsrv-bootstrap-secrets-job-sa
---
apiVersion: v1
data:
  .dockerconfigjson: {{ .Values.global.image.dockerConfigJson | b64enc }}
kind: Secret
metadata:
  name: {{ .Values.global.image.dockerRegistrySecretName }}
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/dockerconfigjson
---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-rsa-keys
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
spec:
  template:
    spec:
      serviceAccountName: obsrv-bootstrap-secrets-job-sa
      imagePullSecrets:
      - name: {{ $.Values.global.image.dockerRegistrySecretName }}

      containers:
      - name: openssl
        imagePullPolicy: IfNotPresent
        image: sanketikahub/kubectl:1.32.0-r1
        command:
        - /bin/sh
        - -c
        - |
          set -e
          if ! kubectl get secret openssl-secrets -n {{ .Release.Namespace }} > /dev/null 2>&1; then
            echo "Generating RSA keys..."
            openssl genpkey -algorithm RSA -out /tmp/private.pem -pkeyopt rsa_keygen_bits:2048
            openssl rsa -in /tmp/private.pem -pubout -out /tmp/public.pem

            echo "Creating OpenSSL secret in {{ .Release.Namespace }} namespace..."

            kubectl create secret generic openssl-secrets \
              --from-file=private.pem=/tmp/private.pem \
              --from-file=public.pem=/tmp/public.pem \
              --namespace {{ .Release.Namespace }} --dry-run=client -o yaml | kubectl apply -f -
          else
            echo "OpenSSL secrets already exists. Skipping creation."
          fi

          echo "Adding annotations for reflection into dataset-api,web-console"
          kubectl annotate secret openssl-secrets \
            --namespace {{ .Release.Namespace }} \
            reflector.v1.k8s.emberstack.com/reflection-allowed=true \
            reflector.v1.k8s.emberstack.com/reflection-auto-enabled=true \
            reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces={{ printf "%s,%s" .Values.global.namespaces.dataset_api_namespace .Values.global.namespaces.web_console_namesapce }} --overwrite

          echo "Job completed."
      restartPolicy: OnFailure
