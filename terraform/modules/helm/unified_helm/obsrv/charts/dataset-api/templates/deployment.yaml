---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      initContainers:
      - name: check-db-ready
      {{ if .Values.global.azure.images.postgres }}
        image: "{{ .Values.global.azure.images.postgres.registry }}/{{ .Values.global.azure.images.postgres.image }}@{{ .Values.global.azure.images.postgres.digest }}"
      {{ else }}
        image: postgres:latest
      {{ end }}
        command: ['sh', '-c', 
          'until pg_isready -h {{ .Release.Name }}-postgresql-hl.postgresql.svc.cluster.local -p 5432; 
          do echo waiting for database; sleep 2; done;']
      - name: wait-for-available-kafka
      {{ if .Values.global.azure.images.kafka }}
        image: "{{ .Values.global.azure.images.kafka.registry }}/{{ .Values.global.azure.images.kafka.image }}@{{ .Values.global.azure.images.kafka.digest }}"
      {{ else }}
        image: docker.io/bitnami/kafka:3.5.1-debian-11-r21
      {{ end }}
        command:
          - /bin/bash
        args:
          - -ec
          - |
            until wait-for-port \
            --host={{ .Release.Name }}-kafka-headless.kafka.svc.cluster.local \
            --state=inuse \
            --timeout=120 \
            9092; \
            do echo waiting for kafka; sleep 2; done;
            echo "Kafka is available";
      containers:
        - name: {{ .Chart.Name }}
        {{ if .Values.global.azure.images.dataset_api }}
          image: "{{ .Values.global.azure.images.dataset_api.registry }}/{{ .Values.global.azure.images.dataset_api.image }}:{{ .Values.global.azure.images.dataset_api.digest }}"
        {{ else }}
          image: "{{ .Values.dockerhub }}/{{ .Values.repository }}:{{ .Values.image_tag }}"
        {{ end }}
          imagePullPolicy: Always
          envFrom:
           - configMapRef:
              name: {{ .Chart.Name }}-config

          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Chart.Name }}-service"
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Chart.Name }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - name: http-{{ .Chart.Name }}
      protocol: TCP
      port: {{ .Values.network.targetport }}
  selector:
    app: {{ .Chart.Name }}
