{{- range $job_name, $job_config :=  .Values.secor_jobs }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    configmap.reloader.stakater.com/reload: {{ $job_name }}-config
  name: "{{ $job_name }}-{{ $.Values.secor_env }}"
  namespace: {{ $.Values.namespace }}
  labels:
    app: secor
    chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
    release: {{ get $.Values.secor_jobs $.Release.Name }}
    heritage: {{ get $.Values.secor_jobs $.Release.Service }}
spec:
  serviceName: secor
  updateStrategy:
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: secor
      release: {{ $job_name }}
  template:
    metadata:
      labels:
        azure-extensions-usage-release-identifier: obsrv-base
        app: secor
        release: {{ $job_name }}
    spec:
      # serviceAccountName: {{ $.Values.namespace }}-sa
      # imagePullSecrets:
      # - name: {{ $.Values.imagepullsecrets }}
      initContainers:
      - name: change-pv-dir-ownership
        image: alpine:3
        command: ["/bin/sh", "-c"]
        args: ["chown -R 9999:9999 /mnt/data"]
        volumeMounts:
        - name: data-path
          mountPath: /mnt/data
      - name: wait-for-available-kafka
      {{ if $.Values.global.azure.images.kafka }}
        image: "{{ $.Values.global.azure.images.kafka.registry }}/{{ $.Values.global.azure.images.kafka.image }}:{{ $.Values.global.azure.images.kafka.digest }}"
      {{ else }}
        image: docker.io/bitnami/kafka:3.5.1-debian-11-r21
      {{ end }}
        command:
          - /bin/bash
        args:
          - -ec
          - |
            until wait-for-port \
            --host={{ $.Release.Name }}-kafka-headless.kafka.svc.cluster.local \
            --state=inuse \
            --timeout=120 \
            9092; \
            do echo waiting for kafka; sleep 2; done;
            echo "Kafka is available";
      containers:
        - name: {{ $job_name }}-secor
        {{ if $.Values.global.azure.images.secor }}
          image: "{{ $.Values.global.azure.images.secor.registry }}/{{ $.Values.global.azure.images.secor.image }}:{{ $.Values.global.azure.images.secor.digest }}"
        {{ else }}
          image: {{ $.Values.image_repository }}:{{ $.Values.image_tag }}
        {{ end }}
          imagePullPolicy: {{ $.Values.pullPolicy }}
          env:
            - name: "CONFIG_FILE"
              value: "/opt/secor/config/secor.partition.properties"
            - name: "LOG4J_CONFIGURATION"
              value: "/opt/secor/config/log4j.docker.properties"
            - name: "JVM_MEMORY"
              value: "{{ $.Values.jvm_memory }}"
            - name: "TIMEZONE"
              value: "{{ $.Values.timezone }}"   
          volumeMounts:
           - mountPath: /opt/secor/config
             name: secor-config
           - name: "data-path"
             mountPath: /mnt/data
          resources:
            requests:
              cpu: 128m
              memory: 512Mi
            limits:
              cpu: 128m
              memory: 512Mi
          securityContext:
            runAsUser: 9999
      volumes:
        - configMap:
            name: {{ $job_name }}-config
          name: secor-config
  volumeClaimTemplates:
    - metadata:
        name: {{ $.Values.describedobject.name }}
        labels:
          app: secor
      spec:
        storageClassName: "{{- $.Values.storageClass }}"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
{{- end }}
