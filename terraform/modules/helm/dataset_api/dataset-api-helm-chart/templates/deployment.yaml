---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      serviceAccountName: {{ .Chart.Name }}-sa
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.dockerhub }}/{{ .Values.repository }}:{{ .Values.image_tag }}"
          imagePullPolicy: Always
          env:
            - name: system_env
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: SYSTEM_ENV
            - name: client_id
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: CLIENT_ID
            - name: druid_host
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: DRUID_HOST
            - name: druid_port
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: DRUID_PORT
            - name: kafka_host
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: KAFKA_HOST
            - name: kafka_port
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: KAFKA_PORT
            - name: kafka_initial_retry_time
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: KAFKA_INITIAL_RETRY_TIME
            - name: kafka_retries
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: KAFKA_RETRIES
            - name: kafka_connection_timeout
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: KAFKA_CONNECTION_TIMEOUT
            - name: postgres_host
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: POSTGRES_HOST
            - name: postgres_port
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: POSTGRES_PORT
            - name: postgres_database
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: POSTGRES_DATABASE
            - name: postgres_username
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: POSTGRES_USERNAME
            - name: postgres_password
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: POSTGRES_PASSWORD
            - name: telemetry_kafka_compression
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: TELEMETRY_KAFKA_COMPRESSION
            - name: redis_host
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: REDIS_HOST
            - name: redis_port
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-config"
                  key: REDIS_PORT

          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Chart.Name }}-service"
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Chart.Name }}
spec:
  type: LoadBalancer
  ports:
    - name: http-{{ .Chart.Name }}
      protocol: TCP
      port: {{ .Values.network.targetport }}
  selector:
    app: {{ .Chart.Name }}
