checkpoint_store_type: ${checkpoint_store_type}
s3_access_key: ${s3_access_key}
s3_secret_key: ${s3_secret_key}
azure_account: ${azure_account}
azure_secret: ${azure_secret}
google_service_account_key_path: ${google_service_account_key_path}
repository: ${flink_container_registry}
image_tag: ${flink_image_tag}
base_config: |
  job {
    env = "dev"
    enable.distributed.checkpointing = false
    statebackend {
      base.url = "${checkpoint_base_url}"
    }
  }
  kafka {
    broker-servers = "kafka-headless.kafka.svc.cluster.local:9092"
    producer.broker-servers = "kafka-headless.kafka.svc.cluster.local:9092"
    consumer.broker-servers = "kafka-headless.kafka.svc.cluster.local:9092"
    zookeeper = "kafka-zookeeper-headless.svc.cluster.local:2181"
    producer {
      max-request-size = 1572864
      batch.size = 98304
      linger.ms = 10
      compression = "snappy"
    }
    output.system.event.topic = $${job.env}".system.events"
  }
  task {
    parallelism = 1
    consumer.parallelism = 1
    checkpointing.interval = 10000
    checkpointing.pause.between.seconds = 10000
    restart-strategy.attempts = 3
    restart-strategy.delay = 30000 # in milli-seconds
  }

  redis.connection.timeout = 100
  redis {
    host = obsrv-redis-headless.redis.svc.cluster.local
    port = 6379
  }

  redis-meta {
    host = obsrv-redis-headless.redis.svc.cluster.local
    port = 6379
  }

  postgres {
    host = postgresql-hl.postgres.svc.cluster.local
    port = 5432
    maxConnections = 2
    user = postgres
    password = ${postgresql_admin_password}
    database = obsrv
  }

  lms-cassandra {
    host = "localhost"
    port = "9042"
  }